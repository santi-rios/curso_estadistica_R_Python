{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Graficar Distribuciones de Probabilidad en Python\"\n",
        "subtitle: \"Primeros pasos con matplotlib y seaborn\"\n",
        "author:\n",
        "  - name: \"Mtro. Santiago Ríos\"\n",
        "    email: santiagoboo99@gmail.com\n",
        "    affiliation: \n",
        "      - name: Cursos Orca\n",
        "        city: CDMX\n",
        "        url: orcaasesina.com\n",
        "format:\n",
        "  live-html:\n",
        "    toc: true\n",
        "sidebar: false\n",
        "pyodide: \n",
        "    packages: \n",
        "        - pandas\n",
        "        - matplotlib\n",
        "        - seaborn\n",
        "        - numpy\n",
        "---\n",
        "\n",
        "## Introducción y Objetivos\n",
        "\n",
        "- Antes de seguir con el tema de distribuciones de probabilidad, vamos a aprender a graficar en Python.\n",
        "- En esta lección, aprenderás a graficar distribuciones de probabilidad en Python con las bibliotecas `matplotlib` y `seaborn`.\n",
        "- Comenzaremos graficando un histograma, que es una forma común de visualizar la distribución de una variable continua.\n",
        "- Estas bibliotecas siguen una estructura lógica y consistente que facilita la creación de gráficos complejos.\n",
        "\n",
        "---\n",
        "\n",
        "## Paso 1. Cargar las librerías\n",
        "\n",
        "```{pyodide}\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "```\n",
        "\n",
        "---\n",
        "\n",
        "## Paso 2. Generar datos\n",
        "\n",
        "- Vamos a crear un dataset de ejemplo con 1000 datos que siguen una distribución normal.\n",
        "\n",
        "```{pyodide}\n",
        "np.random.seed(42)\n",
        "datos_normales = np.random.normal(loc=50, scale=10, size=1000)\n",
        "# Visualizar los primeros y últimos datos\n",
        "print(\"Primeros 10:\", datos_normales[:10])\n",
        "print(\"Últimos 10:\", datos_normales[-10:])\n",
        "df_normales = pd.DataFrame({'valor': datos_normales})\n",
        "```\n",
        "\n",
        "---\n",
        "\n",
        "## Paso 3. Crear un histograma básico\n",
        "\n",
        "```{pyodide}\n",
        "plt.figure(figsize=(8,5))\n",
        "sns.histplot(df_normales['valor'], bins=30, color=\"skyblue\", edgecolor=\"black\")\n",
        "plt.title(\"Distribución de Datos Normales\")\n",
        "plt.xlabel(\"Valor de X\")\n",
        "plt.ylabel(\"Frecuencia de y\")\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "---\n",
        "\n",
        "## ¿Cómo afecta el número de contenedores (bins)?\n",
        "\n",
        "- Cambia el número de bins y observa cómo se modifica el gráfico.\n",
        "\n",
        "```{pyodide}\n",
        "plt.figure(figsize=(8,5))\n",
        "sns.histplot(df_normales['valor'], bins=10, color=\"skyblue\")\n",
        "plt.title(\"Menos bins\")\n",
        "plt.show()\n",
        "\n",
        "plt.figure(figsize=(8,5))\n",
        "sns.histplot(df_normales['valor'], bins=100, color=\"skyblue\")\n",
        "plt.title(\"Más bins\")\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "---\n",
        "\n",
        "## Guardar el gráfico en un objeto y personalizarlo\n",
        "\n",
        "```{pyodide}\n",
        "fig, ax = plt.subplots(figsize=(8,5))\n",
        "sns.histplot(df_normales['valor'], bins=30, color=\"skyblue\", edgecolor=\"black\", ax=ax)\n",
        "ax.set_title(\"Distribución de Datos Normales\")\n",
        "ax.set_xlabel(\"Valor de X\")\n",
        "ax.set_ylabel(\"Frecuencia de y\")\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "---\n",
        "\n",
        "## Guardar el gráfico como imagen\n",
        "\n",
        "```{pyodide}\n",
        "fig.savefig(\"histograma_normales.png\", dpi=300)\n",
        "```\n",
        "\n",
        "---\n",
        "\n",
        "## Ejemplo Práctico: Alturas de Jirafas\n",
        "\n",
        "- Simulamos datos de alturas de jirafas en dos islas diferentes.\n",
        "\n",
        "```{pyodide}\n",
        "np.random.seed(12)\n",
        "x1 = np.round(np.random.normal(10, 2, 50))\n",
        "x2 = np.round(np.random.normal(18, 1.2, 50))\n",
        "alturas = np.concatenate([x1, x2])\n",
        "islas = np.array([\"Isla #1\"]*50 + [\"Isla #2\"]*50)\n",
        "df = pd.DataFrame({\"altura\": alturas, \"isla\": islas})\n",
        "```\n",
        "\n",
        "---\n",
        "\n",
        "## Histograma de alturas de jirafas\n",
        "\n",
        "```{pyodide}\n",
        "plt.figure(figsize=(8,5))\n",
        "sns.histplot(data=df, x=\"altura\", hue=\"isla\", bins=10, alpha=0.7, element=\"step\", stat=\"count\")\n",
        "plt.title(\"Distribución de Alturas de Jirafas por Isla\")\n",
        "plt.xlabel(\"Altura (cm)\")\n",
        "plt.ylabel(\"Frecuencia\")\n",
        "plt.legend(title=\"Isla\")\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "---\n",
        "\n",
        "## Personalizar colores y temas\n",
        "\n",
        "```{pyodide}\n",
        "plt.figure(figsize=(8,5))\n",
        "sns.histplot(data=df, x=\"altura\", hue=\"isla\", bins=10, palette=[\"#00cd00\", \"#00c5cd\"], alpha=0.7, element=\"step\", stat=\"count\")\n",
        "plt.title(\"Distribución de Alturas de Jirafas por Isla\")\n",
        "plt.xlabel(\"Altura (cm)\")\n",
        "plt.ylabel(\"Frecuencia\")\n",
        "plt.legend(title=\"Isla\", loc=\"upper right\")\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "---\n",
        "\n",
        "## Guardar el gráfico de jirafas\n",
        "\n",
        "```{pyodide}\n",
        "plt.savefig(\"histograma_jirafas.png\", dpi=300)\n",
        "```\n",
        "\n",
        "---\n",
        "\n",
        "## Reflexión\n",
        "\n",
        "- ¿Cómo ayuda la visualización a entender mejor los datos?\n",
        "- ¿Qué diferencias observas entre los grupos?\n",
        "- ¿Cómo puedes personalizar tus gráficos para comunicar mejor tus hallazgos?\n",
        "\n",
        "Estas herramientas te permiten visualizar y comunicar la estructura de tus datos en Python."
      ],
      "id": "b35215d2"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/home/santi/.local/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}