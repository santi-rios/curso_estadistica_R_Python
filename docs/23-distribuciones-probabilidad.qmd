---
title: "Distribuciones de Probabilidad"
subtitle: "Distrbución Normal"
author:
  - name: "Mtro. Santiago Ríos"
    email: santiagoboo99@gmail.com
    affiliation: 
      - name: Cursos Or ca
        city: CDMX
        url: orcaasesina.com
format: 
    live-html:
        # highlightStyle: github
        # highlightLines: true
        theme: lux
sidebar: false
webr:
    packages: 
        - ggplot2
        - dplyr
        - tidyr
        - plotly
        - tweenr
# pyodide: 
#     packages: 
#         - scikit-learn
#         - pandas
#         - matplotlib
#         - seaborn
#         - statsmodels
engine: knitr
---

{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}


![](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/fa7b5022-e604-44d4-8659-985f427a673f_rw_1920.png?h=bd0561fd403aa4d7607c5609ea1ea292)

## Introducción y Objetivos 


- Antes de comenzar con las lecciones de estadística, es importante entender las **distribuciones de probabilidad**.
- Las *distribuciones de probabilidad* describen cómo se distribuyen los valores posibles de una variable aleatoria. Estas representan la probabilidad de los valores que puede tomar una variable, siendo algunos valores más probables que otros.
- Una **variable aleatoria** es una variable ([lección previa](https://riverorca.com/mod/hvp/view.php?id=236)) cuyos valores son el resultado de un fenómeno aleatorio, como el lanzamiento de un dado o la altura de un grupo de personas.
- En las siguientes lecciones, abordaremos algunas de las distribuciones más comunes y cómo trabajarlas en R.
- Para ello, nos enfocaremos en un ejemplo fictício de alturas de jirafas "miniatura" en 2 diferentes islas.


Imagina que tomas *aleatoriamente* la altura de 100 jirafas: 50 pertenecienctes a la isla A y 50 a la isla B, como se muestra en las imágenes. 


![Isla A e Isla B](https://tinystats.github.io/teacups-giraffes-and-statistics/images/02_bellCurve/giraffe_islands2.jpg)


![Toma de alturas de jirafas miniatura](https://tinystats.github.io/teacups-giraffes-and-statistics/images/02_bellCurve/giraffe_lineup4.jpg)




Gráficos por [tinystats](https://tinystats.github.io/teacups-giraffes-and-statistics/02_bellCurve.html).






- ¿Cómo podemos visualizar los 100 datos para ver cuál es la altura más común, la menos común y el rango de las alturas?
- Una forma practica sería la siguiente: tomas la altura de cada jirafa y llevas un conteo de cuántas veces se repite cada altura (**frecuencia**).
- Para simplificar este conteo, vamos a redondear las alturas a números enteros (por ejemplo, 6 cm, 7 cm, 8 cm, etc.).
- Esta es la base de un gráfico conocido como **histograma**, que muestra la distribución de los datos. Como verás, hay valores que se repiten más que otros, lo que se observa como picos en el gráfico.
- Ejecuta el código de la siguiente diapositiva y observa cómo se va construyendo el histograma. Cada "bolita" que aparece en el gráfico representa un dato de altura. Si hay más de un dato para esa altura, se apila para llevar el conteo o frecuencia. No te preocupes por el código, solo observa el gráfico.
- NOTA: Puedes hacer click en el botón de reproducción (`play`) para ver la animación después de ejecutar el código; tarda unos segundos en cargar la animación.




```{webr}
#| include: false

library(plotly)
library(tidyverse)
library(tweenr)

set.seed(12)
x <- round(rnorm(25, 10, 2))
x2 <- round(rnorm(25, 18, 1.2))
x <- c(x, x2)
df <- data.frame(x = x, y = 23, type = rep(c("Isla #1", "Isla #2"), each = 25))
dfs <- list(df)
for (i in seq_len(nrow(df))) {
  dftemp <- tail(dfs, 1)
  dftemp[[1]]$y[i] <- sum(dftemp[[1]]$x[seq_len(i)] == dftemp[[1]]$x[i])
  dfs <- append(dfs, dftemp)
}
dfs <- append(dfs, dfs[rep(length(dfs), 3)])
# Reduce nframes to 100
dft <- tween_states(dfs, tweenlength = 10, statelength = 1, ease = "cubic-in", nframes = 100)
dft$y <- dft$y - 0.5
dft <- dft[dft$y != 23, ]

m <- list(l = 50, r = 50, b = 10, t = 10, pad = 4)

histograma_plot <- 
  dft %>% 
  plot_ly(
    x = ~x, y = ~y, frame = ~.frame, color = ~type,
    colors = c("green3", "turquoise3"),
    marker = list(size = 16), width = 630, height = 390
  ) %>%
  config(displayModeBar = F) %>%
  layout(
    xaxis = list(range = c(4, 23), title = "Altura de jirafas en cm", zeroline = F),
    yaxis = list(range = c(-0.5, 21), title = "Frecuencia", zeroline = F),
    legend = list(x = 0.075, y = 0.91),
    autosize = F, margin = m
  ) %>%
  animation_opts(frame = 25, transition = 0, redraw = FALSE) %>%
  animation_slider(hide = T) %>%
  animation_button(x = 1, xanchor = "right", y = 0, yanchor = "bottom")
```


```{webr}
#| autorun: true
#| warning: false

histograma_plot
```

::: {.callout collapse="true"}
## Código usado para el gráfico de la distribución de alturas de jirafas

```r
library(plotly)
library(tidyverse)
library(tweenr)

set.seed(12)
x <- round(rnorm(25, 10, 2))
x2 <- round(rnorm(25, 18, 1.2))
x <- c(x, x2)
df <- data.frame(x = x, y = 23, type = rep(c("Isla #1", "Isla #2"), each = 25))
dfs <- list(df)
for (i in seq_len(nrow(df))) {
  dftemp <- tail(dfs, 1)
  dftemp[[1]]$y[i] <- sum(dftemp[[1]]$x[seq_len(i)] == dftemp[[1]]$x[i])
  dfs <- append(dfs, dftemp)
}
dfs <- append(dfs, dfs[rep(length(dfs), 3)])
# Reduce nframes to 100
dft <- tween_states(dfs, tweenlength = 10, statelength = 1, ease = "cubic-in", nframes = 100)
dft$y <- dft$y - 0.5
dft <- dft[dft$y != 23, ]

m <- list(l = 50, r = 50, b = 10, t = 10, pad = 4)

histograma_plot <- 
  dft %>% 
  plot_ly(
    x = ~x, y = ~y, frame = ~.frame, color = ~type,
    colors = c("green3", "turquoise3"),
    marker = list(size = 16), width = 630, height = 390
  ) %>%
  config(displayModeBar = F) %>%
  layout(
    xaxis = list(range = c(4, 23), title = "Altura de jirafas en cm", zeroline = F),
    yaxis = list(range = c(-0.5, 21), title = "Frecuencia", zeroline = F),
    legend = list(x = 0.075, y = 0.91),
    autosize = F, margin = m
  ) %>%
  animation_opts(frame = 25, transition = 0, redraw = FALSE) %>%
  animation_slider(hide = T) %>%
  animation_button(x = 1, xanchor = "right", y = 0, yanchor = "bottom")

```
:::


- El grafico que acabamos de ver (**histograma**) muestra la *distribución* o forma de nuestros datos.
- A partir de la distribución de nuestra variable de altura, podemos observar lo siguiente:
    - Dónde se concentran la mayoría de los valores de altura para cada isla. 
    - La altura más común es diferente para las firafas de la isla 1 y 2.
    - Hay una variabilidad en las alturas, con algunas jirafas más altas y otras más bajas.




- Dependiendo de la forma de la distribución, se le da un nombre a esta distribución de los datos. 
- La más común y utilizada en ciencias biomédicas es la **distribución normal**, también conocida como **campana de Gauss**. Muchas variables en la naturaleza siguen una distribución normal, como la altura de las personas, el peso de los animales, la temperatura, etc. Sin embargo, no todas las variables siguen una distribución normal, por lo que es importante verificar la forma de la distribución de los datos antes de realizar cualquier análisis estadístico.
- Observa el siguiente gráfico de la distribución normal, que muestra la forma típica de esta distribución. En lo que resta de la lección veremos las características de esta distribución y cómo se relaciona con nuestros datos de alturas de jirafas. 

```{webr}	
#| autorun: true

ggplot(data = data.frame(x = c(-3, 3)), aes(x)) +
  stat_function(fun = dnorm, n = 101, args = list(mean = 0, sd = 1)) + ylab("") +
  scale_y_continuous(breaks = NULL) +
  theme_classic()

```

- Cada distribución tiene sus propias características y propiedades, lo que las hace únicas y útiles para diferentes situaciones.
- En el caso de la distribución normal, podemos describirla con dos parámetros: la **media** y la **desviación estándar** que se verán a continuación.
- Exploremos la distribución normal con nuestro ejemplo de alturas de jirafas. Podemos observar las siguientes características:
    - Tiene un solo pico o punto más alto donde se concentran los datos.
      - NOTA: En nuestro gráfico se observan 2 picos, pero esto es porque estamos observando las alturas de 2 grupos de jirafas diferentes. Sin embargo, cada grupo tiene un único pico. 
    - Los datos se distribuyen simétricamente alrededor de este punto medio. 

![](https://tinystats.github.io/teacups-giraffes-and-statistics/images/02_bellCurve/normal_hist.png)



- Una vez que hemos visualizado la distribución de los datos de nuestra variable, el siguiente paso es describir las alturas con medidas numéricas.
- Para esto, utilizamos las **medidas de tendencia central** y **dispersión**.
- Estas medidas nos ayudan a comprender tanto el "centro" de los datos como la "dispersión" de estos. 

## Medidas de Tendencia Central 

- Las medidas de tendencia central nos ayudan a resumir la "ubicación" de los datos, en especial, dónde se concentran los datos. Las medidas más comunes son:
    - **Media**: el promedio de los datos.
    - **Mediana**: el valor que se encuentra en el centro de los datos.
    - **Moda**: el valor que se repite con mayor frecuencia.
- En una distribución normal teórica, la media, mediana y moda son idénticas. Sin embargo, en la práctica, suelen ser diferentes, aunque cercanas.

![](https://tinystats.github.io/teacups-giraffes-and-statistics/images/03_mean/mean_hist.png)

### Media o Promedio
- La media es el promedio de todos los valores en un conjunto de datos.
- Se calcula sumando todos los valores y dividiendo por el número total de observaciones.
- Puede ser calculada fácilmente en R con la función `mean()`, la cuál podemos usar denrtro de las funciones de manipulación de datos de `dplyr` como ya hemos visto.
- Observa cómo calculmos la media de las alturas de las jirafas en el siguiente código. Nuestro dataframe se llama `alturas_df` (ya está cargado en la diapositiva) y tiene las columnas `altura` e `isla`.

```{webr}
#| include: false
#| autorun: true

library(dplyr)

set.seed(12)
x <- round(rnorm(50, 10, 2))
x2 <- round(rnorm(50, 18, 1.2))
x <- c(x, x2)
df <- data.frame(x = x, y = 23, type = rep(c("Isla #1", "Isla #2"), 
    each = 50))

alturas_df <- df %>%
  rename(altura = x, isla = type) 

```

```{webr}

alturas_df %>%
 group_by(isla) %>% # agrupamos por isla
 summarise(media = mean(altura)) # calculamos la media de las alturas

```

![](https://tinystats.github.io/teacups-giraffes-and-statistics/images/04_variance/giraffe_variance1.jpg)

::: {.callout-note}

- Cuando nos referimos a la media, podemos hablar de la *media poblacional* o la *media muestral*.

- La media *poblacional* es el promedio de todos los valores en una población completa y se denota con el símbolo `μ` (mu). Esta media es desconocida en la práctica, ya que rara vez tenemos acceso a todos los datos de una población.

- La media *muestral* es el promedio de los valores en una muestra de la población y se denota con el símbolo `x̄` (x barra). Esta es la media que calculamos con nuestros datos.

- De manera similar, cuando nos referimos al tamaño de la *población*, usamos `N`, y cuando nos referimos al tamaño de la *muestra*, usamos `n` (en nuestro caso, `n = 100`).

:::

Podemos visualizar la media en nuestro histograma de alturas de jirafas. La línea vertical en el gráfico representa la media de las alturas de las jirafas en cada isla. Observa cómo la media se encuentra en el centro de la distribución de los datos. **Nota**: en la próxima lección veremos y explicaremos cómo realizar estos gráficos.

```{webr}
#| autorun: true

# Calcular media para cada isla
media_alturas <- alturas_df %>%
  group_by(isla) %>%
  summarise(
    media = mean(altura, na.rm = TRUE)
  )
# Graficar el histograma e incluir líneas para la media y mediana
ggplot(alturas_df, aes(x = altura, fill = isla)) +
  geom_histogram(binwidth = 1, alpha = 0.6, position = "identity") +
  geom_vline(data = medidas_alturas, aes(xintercept = media, color = isla), linetype = "dashed", size = 1.2) +  # Línea de la media
  labs(title = "Distribución de Alturas de Jirafas con Media",
       x = "Altura (cm)",
       y = "Frecuencia",
       fill = "Isla") +
  theme_classic()

```

### Mediana 

- La mediana es el valor que se encuentra en el centro de los datos cuando estos están ordenados de menor a mayor.
- Es una medida de tendencia central robusta, ya que no se ve afectada por valores extremos o atípicos.
- En R, podemos calcular la mediana con la función `median()`.

```{webr}

alturas_df %>%
 group_by(isla) %>% # agrupamos por isla
 summarise(median = median(altura)) # calculamos la mediana de las alturas

```

Para graficarlo (observa que el valor de la mediana es muy similar al de la media):

```{webr}
#| autorun: true

# Calcular mediana para cada isla
mediana_alturas <- alturas_df %>%
  group_by(isla) %>%
  summarise(
    mediana = median(altura, na.rm = TRUE)
  )
# Graficar el histograma e incluir líneas para lamediana
ggplot(alturas_df, aes(x = altura, fill = isla)) +
  geom_histogram(binwidth = 1, alpha = 0.6, position = "identity") +
  geom_vline(data = mediana_alturas, aes(xintercept = mediana, color = isla), linetype = "dashed", size = 1.2) +  # Línea de la media
  labs(title = "Distribución de Alturas de Jirafas con Mediana",
       x = "Altura (cm)",
       y = "Frecuencia",
       fill = "Isla") +
  theme_classic()

```

## Moda 
- La moda es el valor que se repite con mayor frecuencia en un conjunto de datos.
- Puede haber más de una moda en un conjunto de datos, lo que se conoce como distribución multimodal.
- En R, podemos calcular la moda con la función `mode()`. **NOTA**: esta función no está disponible en R por defecto, por lo que debemos definirla manualmente.

```{webr}

# Definir función para calcular la moda
mode <- function(variable){
  which.max(tabulate(variable)) # devuelve el valor que más se repite
}

alturas_df %>%
 group_by(isla) %>% # agrupamos por isla
 summarise(moda = mode(altura)) # calculamos la moda de las alturas # calculamos la moda de las alturas


```


## Medidas de Dispersión 
- Las medidas de dispersión nos ayudan a entender cuánto varían los datos (qué tan dispersos están).
- En la siguiente figura, se muestran 3 distribuciones de probabilidad de una variable con la misma media pero diferente dispersión. La distribución de la izquierda tiene una menor dispersión que la del centro, aunque la figura de la derecha es la que menor dispersión tiene. Vamos a ver qué significa esto en términos de medidas de dispersión.

![](https://tinystats.github.io/teacups-giraffes-and-statistics/images/04_variance/bells_edited-04.png)

### Varianza 
- La varianza mide cuánto varían los datos alrededor de la media.
- Se calcula sumando las diferencias al cuadrado entre cada valor y la media, y luego dividiendo por el número total de observaciones.
- La varianza es una medida de dispersión cuadrática, ya que considera la magnitud de las diferencias al cuadrado. Esto se hace para evitar que las diferencias positivas y negativas se cancelen entre sí.
- En R, podemos calcular la varianza con la función `var()`.

```{webr}

alturas_df %>% 
  group_by(isla) %>% # agrupamos por isla
  summarise(varianza = var(altura)) # calculamos la varianza de las alturas

```

![La varianza es una medida de qué tanto se aleja cada medición de la media](https://tinystats.github.io/teacups-giraffes-and-statistics/images/04_variance/giraffe_variance2.jpg)

::: {.callout-note}
Cuando se habla de varianza, también se puede hacer referencia a la *varianza poblacional* y la *varianza muestral*. La varianza *poblacional* es la varianza de todos los valores en una población completa y se denota con el símbolo $\sigma^2$ (sigma al cuadrado). La varianza *muestral* es la varianza de los valores en una muestra de la población y se denota con el símbolo $s^2$. En la práctica, usamos la varianza muestral, ya que rara vez tenemos acceso a todos los datos de una población.

:::

## Desviación Estándar

- El problema con la varianza es que está en unidades al cuadrado, lo que puede ser difícil de interpretar. Por eso, a menudo usamos la desviación estándar, que es la raíz cuadrada de la varianza.
- La desviación estándar mide cuánto se desvían los datos de la media, pero en las mismas unidades que los datos.
- En R, podemos calcular la desviación estándar con la función `sd()`.

```{webr}

alturas_df %>%
 group_by(isla) %>% # agrupamos por isla
 summarise(desviacion_estandar = sd(altura)) # calculamos la desviación estándar de las alturas

```

![La desviación estándar mide la dispersión de los datos alrededor de la media](https://tinystats.github.io/teacups-giraffes-and-statistics/images/04_variance/giraffe_variance3.jpg)

::: {.callout-note}
Cuando se habla de desviación estándar, también se puede hacer referencia a la *desviación estándar poblacional* y la *desviación estándar muestral*. La desviación estándar *poblacional* es la desviación estándar de todos los valores en una población completa y se denota con el símbolo $\sigma$ (sigma). La desviación estándar *muestral* es la desviación estándar de los valores en una muestra de la población y se denota con el símbolo $s$. En la práctica, usamos la desviación estándar muestral, ya que rara vez tenemos acceso a todos los datos de una población.

:::

Podemos graficarlo de esta manera, donde se muestra la media y la desviación estándar de las alturas de las jirafas en cada isla como una línea punteada alrededor de la media. Observa cómo la desviación estándar nos da una idea de cuánto varían las alturas alrededor de la media (varían más en la isla 1 que en la isla 2).

```{webr}
#| autorun: true

# Calcular media y desviación estándar para cada isla
medidas_alturas <- alturas_df %>%
  group_by(isla) %>%
  summarise(
    media = mean(altura, na.rm = TRUE),
    sd = sd(altura, na.rm = TRUE)
  )
# Graficar el histograma e incluir líneas para la media y mediana
ggplot(alturas_df, aes(x = altura, fill = isla)) +
  geom_histogram(binwidth = 1, alpha = 0.6, position = "identity") +
  geom_vline(data = medidas_alturas, aes(xintercept = media, color = isla), linetype = "dashed", size = 1.2) +  # Línea de la media
  geom_vline(data = medidas_alturas, aes(xintercept = media + sd, color = isla), linetype = "dotted", size = 1) +  # Media + 1 SD
  geom_vline(data = medidas_alturas, aes(xintercept = media - sd, color = isla), linetype = "dotted", size = 1) +  # Media - 1 SD
  labs(title = "Distribución de Alturas de Jirafas con Media y Desviación Estándar",
       x = "Altura",
       y = "Frecuencia",
       fill = "Isla") +
  theme_classic()

```

## Significado de la Desviación Estándar 
- La desviación estándar nos indica cuánto se desvían los datos de la media.
- Puede ser usada para predecir que tan raro o común es un valor en la distribución.
- Para una distribución normal, un 97.7% de los datos caen dentro de 3 desviaciones estándar de la media; un 95.4% caen dentro de 2 desviaciones estándar; y un 68.3% caen dentro de 1 desviación estándar.


![](https://tinystats.github.io/teacups-giraffes-and-statistics/images/04_variance/General_empirical.jpg)

- Observa este fenómeno en nustros datos con el siguiente gráfico, donde se muestran las alturas de las jirafas en cada isla y las líneas punteadas representan la media y las líneas de puntos representan 1, 2 y 3 desviaciones estándar de la media. Observa cómo la mayoría de los datos caen dentro de 1, 2 y 3 desviaciones estándar de la media. 
- Este concepto sera muy importante cuando veamos inferencia estadística ya que nos permitirá hacer predicciones sobre los datos. Por ejemplo, si sabemos que la altura promedio de las jirafas en la isla 1 es de 10 cm con una desviación estándar de 2 cm, podemos predecir que la mayoría de las jirafas tendrán alturas entre 8 y 12 cm (1 desviación estándar), entre 6 y 14 cm (2 desviaciones estándar), y entre 4 y 16 cm (3 desviaciones estándar). Si encontramos una jirafa con una altura de 20 cm, sabemos que es un valor raro, ya que está a más de 5 desviaciones estándar de la media. 
- Esto es la base de la inferencia estadística, que veremos en futuras lecciones. La inferencia estadística es el proceso de hacer predicciones o sacar conclusiones sobre una población basadas en una muestra de datos.
- A partir de la distribución normal, podemos hacer inferencias sobre los datos, es decir, sacar conclusiones sobre la población basadas en nuestra muestra de datos.
-  Por ejemplo, podemos estimar la probabilidad de que un valor caiga dentro de cierto rango o comparar dos grupos de datos.

```{webr}
#| autorun: true


# Paso 1: Calcular media y desviación estándar para cada isla
medidas_alturas <- alturas_df %>%
  group_by(isla) %>%
  summarise(
    media = mean(altura, na.rm = TRUE),
    sd = sd(altura, na.rm = TRUE)
  )

# Paso 2: Crear un data frame con las desviaciones estándar (1, 2, y 3)
desviaciones_df <- medidas_alturas %>%
  tidyr::crossing(desviaciones = 1:3) %>%  # Añadimos una columna con los valores 1, 2, y 3
  mutate(
    lim_inf = media - desviaciones * sd,  # Límite inferior (media - n desviaciones estándar)
    lim_sup = media + desviaciones * sd   # Límite superior (media + n desviaciones estándar)
  )

# Paso 3: Graficar el histograma con las líneas correspondientes a 1, 2, y 3 desviaciones estándar
ggplot(alturas_df, aes(x = altura, fill = isla)) +
  geom_histogram(binwidth = 1, alpha = 0.6, position = "identity") +
  geom_vline(data = desviaciones_df, aes(xintercept = media, color = isla), linetype = "dashed", size = 1.2) +  # Línea de la media
  geom_vline(data = desviaciones_df, aes(xintercept = lim_inf, color = isla), linetype = "dotted", size = 1) +  # Línea de límite inferior
  geom_vline(data = desviaciones_df, aes(xintercept = lim_sup, color = isla), linetype = "dotted", size = 1) +  # Línea de límite superior
  facet_wrap(~ desviaciones, labeller = label_both, ncol = 1) +  # Facet para 1, 2 y 3 desviaciones estándar
  labs(title = "Distribución de Alturas de Jirafas con Diferentes Desviaciones Estándar",
       subtitle = "Comparación de 1, 2, y 3 desviaciones estándar",
       x = "Altura",
       y = "Frecuencia",
       fill = "Isla") +
  theme_classic()

```



## Distribución normal estandarizada o Distribución Z 


- Hasta ahora, hemos visto cómo calcular la media y la desviación estándar de una distribución normal. Sin embargo, en la práctica, a menudo necesitamos comparar diferentes distribuciones normales.
- Para facilitar la comparación, podemos **estandarizar** cualquier distribución normal en una **distribución normal estandarizada** o **distribución Z**.
- La distribución normal estandarizada es una versión especial de la distribución normal donde la media es 0 y la desviación estándar es 1.
  

Esto se logra al **transformar** cualquier distribución normal general en una distribución normal estandarizada mediante la siguiente fórmula:

$$
Z = \frac{X - \mu}{\sigma}
$$

Donde:

- $Z$ es el valor estandarizado (con media 0 y desviación estándar 1).
- $X$ es el valor original de la variable.
- $\mu$ es la **media** de la distribución original.
- $\sigma$ es la **desviación estándar** de la distribución original.

**¿Por qué se hace esto?**

La razón por la que se estandarizan las distribuciones es para **facilitar la comparación** entre diferentes conjuntos de datos. Cuando diferentes distribuciones normales se transforman a una forma común (media = 0 y desviación estándar = 1), es más fácil comparar resultados de diferentes estudios o poblaciones.

**Ejemplo**

- Imagina que estamos trabajando con alturas de personas en un país, donde la media es 170 cm y la desviación estándar es 10 cm.
- Si una persona mide 180 cm, podemos estandarizar su altura con la fórmula:
  
  $$
  Z = \frac{180 - 170}{10} = 1
  $$

  Esto significa que esta persona está **1 desviación estándar por encima de la media**.

- Si otra persona mide 160 cm:

  $$
  Z = \frac{160 - 170}{10} = -1
  $$

  Esta persona está **1 desviación estándar por debajo de la media**.

- Al estandarizar las alturas, podemos comparar fácilmente las alturas de estas dos personas, ya que están en la misma escala de puntuaciones Z.

- En R, podemos estandarizar una distribución normal con la función `scale()`. Observa cómo estandarizamos las alturas de las jirafas en cada isla en el siguiente código.
- En este código, hemos estandarizado las alturas de cada jirafa con la función `scale()`. La función hace lo siguiente: Para cada isla, calculará la media y desviación estándar de las alturas de los individuos. Luego, para cada valor de altura, restará la media de la isla correspondiente y dividirá el resultado por la desviación estándar de esa isla, obteniendo los valores estandarizados.

```{webr}

alturas_df %>%
  group_by(isla) %>%
  mutate(
    alturas_estandarizadas = scale(altura)  # Estandarizamos las alturas individuales
  )


```

Ahora, observa qué pasa si calculamos la media y la desviación estándar de las alturas estandarizadas. En una distribución normal estandarizada, la media es 0 y la desviación estándar es 1. Observa cómo se cumple esto en nuestro ejemplo de las alturas de las jirafas.	**Nota**: verás que las medias no son exactamente 0 debido a la precisión de los cálculos en R. Sin embargo, los valores son exponentes muy pequeños, lo que indica que son cercanos a 0.

```{webr}	

alturas_estandarizadas_df <- alturas_df %>%
  group_by(isla) %>%
  mutate(
    alturas_estandarizadas = scale(altura)  # Estandarizamos las alturas individuales
  ) %>%
  group_by(isla) %>%
  summarise(
    media = mean(alturas_estandarizadas, na.rm = TRUE),
    sd = sd(alturas_estandarizadas, na.rm = TRUE)
  )

alturas_estandarizadas_df

```


- Ahora, vamos a graficar estas alturas estandarizadas. Observa cómo ahora es más fácil comparar las alturas de las jirafas en cada isla, ya que todas están en la misma escala de puntuaciones Z. 
- Además, observa cómo la distribución normal estandarizada tiene una media de 0 y una desviación estándar de 1, lo que facilita la comparación entre las alturas de las jirafas en cada isla. 
- Se resaltan las áreas correspondientes a 1, 2 y 3 desviaciones estándar de la media, que corresponden al 68.27%, 95.45% y 99.73% de los datos en una distribución normal.
- No te preocupes por el código. En las próximas lecciones veremos una introducción a la visualización de datos en R. Este es un gráfico un poco más complejo que los que veremos en las primeras lecciones. Sin embargo, más adelante con la práctica, podrás entender y crear gráficos como este en las últimas lecciones del curso. 
- El gráfico utiliza curvas de densidad, que son estimaciones suavizadas de los histogramas.

```{webr}
# Cargar librerías necesarias
library(ggplot2)
library(dplyr)
library(tidyr)

# Estandarizar las alturas por isla
alturas_df_estandarizadas <- alturas_df %>%
  group_by(isla) %>%
  mutate(altura_estandarizada = scale(altura))

# Crear un data frame con las desviaciones estándar (1, 2 y 3)
desviaciones_df <- tibble(desviaciones = 1:3) %>%
  crossing(isla = unique(alturas_df_estandarizadas$isla)) %>%
  mutate(
    lim_inf = -desviaciones,  # Límite inferior (de -1, -2, -3)
    lim_sup = desviaciones    # Límite superior (de 1, 2, 3)
  )
# unir dataframes
alturas_desviaciones_unidas <- full_join(alturas_df_estandarizadas, desviaciones_df, relationship = "many-to-many")

# Crear el gráfico de densidades estandarizadas para cada isla y desviación estándar
ggplot(alturas_desviaciones_unidas, aes(x = altura_estandarizada)) +
  geom_density(aes(fill = isla), alpha = 0.5) +  # Densidad estandarizada por isla
  # Resaltar las áreas correspondientes a 1, 2 y 3 desviaciones estándar
  geom_rect(
            aes(xmin = lim_inf, xmax = lim_sup, ymin = 0, ymax = Inf, fill = isla),
            alpha = 0.3) +
  # Añadir la distribución normal estandarizada
  stat_function(fun = dnorm, args = list(mean = 0, sd = 1), color = "black", size = 1) +
  # Títulos y etiquetas
  labs(
    title = "Distribución Normal Estandarizada por Isla y Nivel de Desviación",
    subtitle = "Áreas bajo la curva correspondientes a 1, 2 y 3 desviaciones estándar",
    x = "Altura Estandarizada (Z)",
    y = "Densidad",
    fill = "Isla"
  ) +
  # Sub gráfico para cada isla y nivel de desviación estándar
  facet_wrap(isla ~ desviaciones) +
  # Personalización del tema
  theme_classic() +
  theme(legend.position = "top")

```

## Reflexión

- Toma en cuenta que en nuestro ejemplo de las jirafas, es probable que no hayamos tomado las alturas de TODAS las jirafas de las islas.
- Por lo tanto, nuestro histograma es una *aproximación* de la verdadera distribución de alturas.
- Esta aproximación está basada en nuestro muestreo aleatorio de las alturas. Esto es común en la estadística, donde trabajamos con **muestras** de datos en lugar de la población completa.
- Existe la posibilidad de que nuestro muestreo no sea adecuado para representar la verdadera distribución de alturas en la población. Esto es un tema importante en la estadística y se conoce como **error de muestreo**.
- Debido a esto, es importante tomar una muestra lo suficientemente grande y representativa.



Para ilustrar este concepto, observa cómo cambia la forma del histograma al tomar muestras de diferentes tamaños de los datos de las jirafas. El siguiente gráfico muestra el histograma de las jirafas, asumiendo que realizamos un muestreo aleatorio de las alturas varias veces (cada cuadro del GIF representa un muestreo diferente, es decir, cada vez que vamos a la isla y tomamos la altura de N jirafas). En cada muestreo, el número de alturas de jirafas tomadas varía, denotado por la letra N, que indica el tamaño de la muestra. Observa cómo con una muestra pequeña, la forma del histograma cambia drásticamente, mientras que con una muestra grande, se mantiene constante y asemeja la forma de la distribución normal. Esto también se verá más adelante.

![](https://tinystats.github.io/teacups-giraffes-and-statistics/02_bellCurve_files/figure-html/unnamed-chunk-10-.gif)
