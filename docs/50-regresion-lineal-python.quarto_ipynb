{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Regresión Lineal Simple con Python\"\n",
        "subtitle: \"Conceptos Clave de Variables\"\n",
        "format: \n",
        "    live-html\n",
        "        # highlight-style: github\n",
        "        # highlight-lines: true\n",
        "        # theme: solar\n",
        "toc: true\n",
        "sidebar: false\n",
        "pyodide: \n",
        "    packages: \n",
        "        - pandas\n",
        "        - matplotlib\n",
        "        - seaborn\n",
        "        - numpy\n",
        "        - statsmodels\n",
        "---\n",
        "\n",
        "## Introducción\n",
        "\n",
        "La regresión lineal simple es una técnica estadística que modela la relación entre dos variables continuas mediante una ecuación lineal. Este método es útil para predecir los valores de una variable dependiente basada en los valores de una variable independiente.\n",
        "\n",
        "Es fundamental comprender que la mayoría de las pruebas estadísticas comunes (como la correlación, la prueba t y el ANOVA) son en realidad casos especiales de modelos lineales. Esta simplicidad subyacente significa que, en lugar de aprender muchas pruebas como herramientas independientes, podemos entenderlas a través de la ecuación fundamental \\( y = \\beta_0 + \\beta_1x \\). Este enfoque no solo simplifica el aprendizaje, sino que también fomenta una comprensión más profunda de las relaciones entre variables y los supuestos paramétricos que comparten estas pruebas.\n",
        "\n",
        "---\n",
        "\n",
        "## Conceptos Clave\n",
        "\n",
        "-   **Modelo de Regresión Lineal Simple:**\n",
        "    -   Representado por la ecuación \\( y = \\beta_0 + \\beta_1x + \\epsilon \\), donde:\n",
        "    -   \\( y \\) es la variable dependiente (resultado).\n",
        "    -   \\( x \\) es la variable independiente (predictora).\n",
        "    -   \\( \\beta_0 \\) es la intersección (ordenada en el origen).\n",
        "    -   \\( \\beta_1 \\) es la pendiente del modelo.\n",
        "    -   \\( \\epsilon \\) es el término de error.\n",
        "\n",
        "-   **Interpretación:**\n",
        "    -   \\( \\beta_1 \\) indica el cambio en la variable dependiente por cada unidad de cambio en la variable independiente.\n",
        "    -   El objetivo es minimizar la suma de los cuadrados de las diferencias entre los valores observados y los valores predichos.\n",
        "\n",
        "---\n",
        "\n",
        "## Ejercicio Práctico en Python\n",
        "\n",
        "Veamos cómo ajustar un modelo de regresión lineal simple utilizando un conjunto de datos simulado con `numpy` y `statsmodels`.\n",
        "\n",
        "```{pyodide}\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import statsmodels.api as sm\n",
        "import statsmodels.formula.api as smf\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Simulación de datos\n",
        "np.random.seed(123)\n",
        "horas_estudio = np.random.normal(loc=5, scale=1.5, size=100)\n",
        "calificacion_examen = 50 + 8 * horas_estudio + np.random.normal(loc=0, scale=5, size=100)\n",
        "\n",
        "# Crear un DataFrame de pandas\n",
        "df = pd.DataFrame({'horas_estudio': horas_estudio, 'calificacion_examen': calificacion_examen})\n",
        "\n",
        "# Ajuste del modelo de regresión lineal simple\n",
        "modelo = smf.ols('calificacion_examen ~ horas_estudio', data=df).fit()\n",
        "\n",
        "# Resumen del modelo\n",
        "print(modelo.summary())\n",
        "\n",
        "# Coeficientes del modelo\n",
        "print(f\"\\nIntercepto (beta_0): {modelo.params['Intercept']:.4f}\")\n",
        "print(f\"Pendiente (beta_1): {modelo.params['horas_estudio']:.4f}\")\n",
        "\n",
        "# Visualización de los resultados\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.regplot(x='horas_estudio', y='calificacion_examen', data=df, \n",
        "            line_kws={\"color\": \"red\"}, scatter_kws={\"color\": \"blue\"})\n",
        "plt.title(\"Regresión Lineal: Horas de Estudio vs Calificación\")\n",
        "plt.xlabel(\"Horas de Estudio\")\n",
        "plt.ylabel(\"Calificación\")\n",
        "plt.legend(['Línea de Regresión'])\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "---\n",
        "\n",
        "## La Regresión Lineal como Base de Otras Pruebas Estadísticas\n",
        "\n",
        "La belleza de los modelos lineales es que unifican muchos conceptos estadísticos que a menudo se enseñan por separado. Entender esto puede simplificar enormemente el aprendizaje de la estadística.\n",
        "\n",
        "-   **Prueba t (t-test):** Una prueba t se puede considerar un modelo lineal donde la variable independiente (`x`) es categórica con solo dos niveles (por ejemplo, \"Grupo de Tratamiento\" vs. \"Grupo de Control\"). El modelo predice la variable dependiente (`y`) basándose en el grupo al que pertenece cada observación.\n",
        "\n",
        "-   **ANOVA:** De manera similar, un ANOVA es un modelo lineal donde la variable independiente (`x`) es categórica pero con más de dos niveles (o grupos). El modelo evalúa si las medias de la variable dependiente son diferentes entre estos grupos.\n",
        "\n",
        "-   **Correlación:** La prueba de correlación de Pearson está directamente relacionada con la regresión lineal simple. El coeficiente de correlación (`r`) es una versión estandarizada de la pendiente (\\( \\beta_1 \\)) del modelo de regresión. Ambos miden la fuerza y la dirección de la relación lineal entre dos variables.\n",
        "\n",
        "Al ver estas pruebas como variantes de un modelo lineal, los supuestos subyacentes (como la normalidad de los residuos y la homogeneidad de las varianzas) se vuelven más fáciles de entender, ya que se derivan del propio modelo lineal.\n",
        "\n",
        "---\n",
        "\n",
        "## Reflexión y Discusión\n",
        "\n",
        "-   Observa la pendiente y el intercepto del modelo: ¿Qué te dicen sobre la relación entre las horas de estudio y las calificaciones?\n",
        "-   Analiza cómo la línea de regresión se ajusta a los datos. ¿Qué sugiere este modelo sobre el poder predictivo de las horas de estudio respecto a las calificaciones de los estudiantes?\n",
        "-   Piensa en cómo podrías formular una prueba t o un ANOVA como un modelo lineal. ¿Cuál sería tu variable `x` y tu variable `y` en cada caso?\n",
        "\n",
        "Esta lección proporciona una comprensión práctica de la regresión lineal simple en Python, permitiendo a los estudiantes capturar y analizar relaciones lineales entre variables y utilizar estos modelos predictivos en escenarios del mundo real."
      ],
      "id": "154e98f4"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/home/santi/.local/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}