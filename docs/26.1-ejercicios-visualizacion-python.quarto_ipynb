{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Ejercicios y Buenas Prácticas de Visualización en Python\"\n",
        "subtitle: \"Aplicación y recomendaciones finales\"\n",
        "format:\n",
        "  live-html:\n",
        "    toc: true\n",
        "sidebar: false\n",
        "pyodide: \n",
        "    packages: \n",
        "        - pandas\n",
        "        - matplotlib\n",
        "        - seaborn\n",
        "        - numpy\n",
        "---\n",
        "\n",
        "## Ejercicio 1: Histograma de datos simulados\n",
        "\n",
        "- Simula 1000 datos de una distribución normal con media 60 y desviación estándar 8.\n",
        "- Grafica el histograma y personaliza el color y el número de bins.\n",
        "\n",
        "```{pyodide}\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "np.random.seed(123)\n",
        "datos = np.random.normal(loc=60, scale=8, size=1000)\n",
        "df = pd.DataFrame({'valor': datos})\n",
        "\n",
        "plt.figure(figsize=(8,5))\n",
        "sns.histplot(df['valor'], bins=25, color=\"coral\", edgecolor=\"black\")\n",
        "plt.title(\"Distribución Normal Simulada\")\n",
        "plt.xlabel(\"Valor\")\n",
        "plt.ylabel(\"Frecuencia\")\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "---\n",
        "\n",
        "## Ejercicio 2: Comparación de grupos\n",
        "\n",
        "- Simula dos grupos de datos (n=50 cada uno) con medias y desviaciones estándar diferentes.\n",
        "- Grafica ambos grupos en un solo histograma, usando diferentes colores.\n",
        "\n",
        "```{pyodide}\n",
        "np.random.seed(321)\n",
        "g1 = np.random.normal(55, 5, 50)\n",
        "g2 = np.random.normal(70, 7, 50)\n",
        "grupo = np.array([\"Grupo 1\"]*50 + [\"Grupo 2\"]*50)\n",
        "df2 = pd.DataFrame({\"valor\": np.concatenate([g1, g2]), \"grupo\": grupo})\n",
        "\n",
        "plt.figure(figsize=(8,5))\n",
        "sns.histplot(data=df2, x=\"valor\", hue=\"grupo\", bins=15, palette=[\"#1f77b4\", \"#ff7f0e\"], alpha=0.7, element=\"step\", stat=\"count\")\n",
        "plt.title(\"Comparación de Grupos\")\n",
        "plt.xlabel(\"Valor\")\n",
        "plt.ylabel(\"Frecuencia\")\n",
        "plt.legend(title=\"Grupo\")\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "---\n",
        "\n",
        "## Buenas prácticas para visualización en Python\n",
        "\n",
        "- Usa títulos y etiquetas claras y descriptivas.\n",
        "- Elige paletas de colores accesibles y consistentes.\n",
        "- Usa `plt.tight_layout()` para mejorar la presentación.\n",
        "- Guarda tus gráficos con alta resolución (`dpi=300`) para presentaciones o publicaciones.\n",
        "- Siempre revisa que los ejes y leyendas sean legibles y no se sobrepongan.\n",
        "\n",
        "---\n",
        "\n",
        "## Reflexión\n",
        "\n",
        "- ¿Qué aprendiste sobre la importancia de la personalización en la visualización?\n",
        "- ¿Cómo puedes aplicar estas prácticas en tus propios proyectos?\n",
        "\n",
        "Estas recomendaciones te ayudarán a crear visualizaciones más efectivas y profesionales en Python."
      ],
      "id": "c24e5acc"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/home/santi/.local/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}