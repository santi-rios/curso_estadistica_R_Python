{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Ejercicio I Visualización y Distribución de Datos con Python\"\n",
        "format:\n",
        "  live-html:\n",
        "    toc: true\n",
        "sidebar: false\n",
        "pyodide: \n",
        "    packages: \n",
        "        - pandas\n",
        "        - matplotlib\n",
        "        - seaborn\n",
        "        - numpy\n",
        "        - gapminder\n",
        "resources:\n",
        "    - datos\n",
        "---\n",
        "\n",
        "## Introducción\n",
        "\n",
        "- En este ejercicio vamos a realizar gráficos utilizando `seaborn` y `matplotlib`.\n",
        "\n",
        "Recordemos lo siguiente:\n",
        "\n",
        "> Un gráfico es un *mapeo* de variables de *datos* a atributos *estéticos* de objetos *geométricos*.\n",
        "\n",
        "Aunque la \"gramática de los gráficos\" es una conceptualización de `ggplot2` en R, sus principios son útiles para construir visualizaciones de forma estructurada en cualquier lenguaje. Tiene *tres componentes principales*:\n",
        "\n",
        "1.  **Datos (_data_):** el `DataFrame` de `pandas` que contiene las variables que queremos graficar.\n",
        "2.  **Geometría (_geometry_):** el tipo de objeto que compone el gráfico. Por ejemplo: puntos, líneas y barras. En `seaborn`, esto se elige con la función de trazado (ej. `scatterplot()`, `lineplot()`).\n",
        "3.  **Estética (_aesthetic_):** atributos de la geometría. Por ejemplo, la posición en los ejes `x` e `y`, el `color`, la `forma` y el `tamaño`. Cada atributo se puede asignar a una columna de nuestro `DataFrame`.\n",
        "\n",
        "## Ejemplo de la gramática en un gráfico\n",
        "\n",
        "Vamos a ver un ejemplo de estos componentes en un gráfico. Para ello, vamos a utilizar el paquete `gapminder`, que contiene datos de desarrollo mundial.\n",
        "\n",
        "Primero, necesitamos instalar las librerías necesarias.\n",
        "```python\n",
        "# | echo: true\n",
        "pip install pandas gapminder seaborn matplotlib\n",
        "```\n",
        "\n",
        "Ahora, carguemos los datos y veámoslos. Para ver los datos de `gapminder`, carga los datos en un DataFrame y luego utiliza el método `.head()` para ver los primeros registros, `.describe()` para un resumen estadístico, o `.info()` para ver la estructura.\n",
        "```{pyodide}\n",
        "#| min-lines: 2\n",
        "import pandas as pd\n",
        "\n",
        "# Read the CSV file into a pandas DataFrame\n",
        "# Cargar los datos\n",
        "df = pd.read_csv('./datos/gap_minder.tsv', sep='t')\n",
        "\n",
        "\n",
        "# Ver las primeras filas\n",
        "df.head()\n",
        "```\n",
        "\n",
        "Como puedes ver, los datos de `gapminder` contienen información sobre la esperanza de vida (`lifeExp`), el PIB per cápita (`gdpPercap`) y la población (`pop`) de varios países a lo largo del tiempo.\n",
        "\n",
        "### Veamos un gráfico a través de la gramática de los gráficos.\n",
        "\n",
        "El siguiente gráfico está realizado con los datos de `gapminder`. Intentemos reconocer qué variables y secciones corresponden a la gramática de gráficos:\n",
        "```{pyodide}\n",
        "\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "sns.scatterplot(data=df, \n",
        "                x=\"gdpPercap\", y=\"lifeExp\", \n",
        "                hue=\"continent\", \n",
        "                size=\"pop\",\n",
        "                sizes=(20, 200)) # Controla el rango de tamaños de los puntos\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "Mirando el código y el gráfico, podemos identificar que:\n",
        "\n",
        "*   **Datos:** el DataFrame `df` se asigna al parámetro `data`.\n",
        "*   **Estética:** el eje `x` representa la variable `gdpPercap`, el eje `y` representa `lifeExp`, el `color` (o `hue`) representa `continent` y el `tamaño` (`size`) representa la población (`pop`).\n",
        "*   **Geometría:** generamos un gráfico de puntos, como indica la función `scatterplot()`.\n",
        "\n",
        "### Cambiemos algunas propiedades\n",
        "\n",
        "Supongamos que queremos cambiar los ejes del gráfico. ¿Cómo cambiarías el código anterior para que el eje `x` represente la esperanza de vida y el eje `y` el PIB per cápita?\n",
        "```{pyodide}\n",
        "#| exercise: grafico_puntos\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "sns.scatterplot(data=df, \n",
        "                x=______, y=______, \n",
        "                hue=\"continent\", \n",
        "                size=\"pop\",\n",
        "                sizes=(20, 200))\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "::: {.callout-note collapse=\"true\" title=\"Hint\"}\n",
        "Recuerda que los ejes están representados por los parámetros `x` (horizontal) e `y` (vertical). Los valores deben ser los nombres de las columnas como cadenas de texto.\n",
        ":::\n",
        "\n",
        "::: {.callout-tip collapse=\"true\" title=\"Solución\"}\n",
        "\n",
        "```{pyodide}\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "sns.scatterplot(data=df, \n",
        "                x=\"lifeExp\", y=\"gdpPercap\", \n",
        "                hue=\"continent\", \n",
        "                size=\"pop\",\n",
        "                sizes=(20, 200))\n",
        "plt.show()\n",
        "```\n",
        "\n",
        ":::\n",
        "\n",
        "¡Bien hecho!\n",
        "\n",
        "Además del gráfico de puntos (`scatterplot`), `seaborn` ofrece otros tipos de gráficos, como gráficos de líneas, de barras o histogramas.\n",
        "\n",
        "¿Cómo te parece que pueden llamarse las funciones para los gráficos de líneas y de barras en `seaborn`?\n",
        "\n",
        "<details>\n",
        "<summary>Respuesta</summary>\n",
        "<strong>¡Buen trabajo si pensaste en `lineplot()` y `barplot()`!</strong> Esas son las funciones para gráficos de líneas y de barras, respectivamente.\n",
        "</details>\n",
        "\n",
        "## Gráfico de líneas\n",
        "\n",
        "Vamos a realizar otros gráficos utilizando los datos en `gapminder`. Para generar el gráfico de líneas, vamos a ver la evolución de la población de México. Los gráficos de líneas son útiles para mostrar la evolución de una variable a lo largo del tiempo.\n",
        "\n",
        "Primero, filtra los datos de `gapminder` para obtener solo los datos de México y guárdalos en un nuevo DataFrame llamado `mex_df`. Utiliza el método `.head()` para ver los primeros registros.\n",
        "```{pyodide}\n",
        "#| exercise: vis_datos_mex\n",
        "mex_df = df[df['______'] == '______']\n",
        "mex_df.head()\n",
        "```\n",
        "\n",
        "::: {.callout-note collapse=\"true\" title=\"Hint\"}\n",
        "Recuerda que el nombre del país es `Mexico` y que la columna que contiene el nombre del país es `country`.\n",
        ":::\n",
        "\n",
        "::: {.callout-tip collapse=\"true\" title=\"Solución\"}\n",
        "\n",
        "```{pyodide}\n",
        "mex_df = df[df['country'] == 'Mexico']\n",
        "mex_df.head()\n",
        "```\n",
        "\n",
        ":::\n",
        "\n",
        "Ahora, a partir de los datos de México, crea un gráfico de línea (`lineplot()`) donde se muestre en el eje `x` los años y en el `y` la población.\n",
        "```{pyodide}\n",
        "#| exercise: grafico_lineas\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "sns.lineplot(data=______, \n",
        "             x=______, y=______)\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "::: {.callout-note collapse=\"true\" title=\"Hint\"}\n",
        "- El DataFrame se llama `mex_df`.\n",
        "- La variable que contiene los años se llama `year`.\n",
        "- La variable que contiene la población se llama `pop`.\n",
        ":::\n",
        "\n",
        "::: {.callout-tip collapse=\"true\" title=\"Solución\"}\n",
        "\n",
        "```{pyodide}\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "sns.lineplot(data=mex_df, \n",
        "             x=\"year\", y=\"pop\")\n",
        "plt.show()\n",
        "```\n",
        "\n",
        ":::\n",
        "\n",
        "### Hagamos un gráfico de barras\n",
        "\n",
        "En `seaborn`, `barplot()` es ideal cuando tienes una variable para el eje x (categórica) y otra para la altura de la barra en el eje y (numérica). Esto es similar a `geom_col()` de `ggplot2`.\n",
        "\n",
        "Si solo tuvieras una variable categórica y quisieras contar sus ocurrencias, usarías `countplot()`, que es similar a `geom_bar()`.\n",
        "\n",
        "Vamos a transformar el gráfico anterior a barras. Ya que tenemos la población (`pop`) para cada año (`year`), usaremos `barplot()`.\n",
        "```{pyodide}\n",
        "#| exercise: grafico_barras\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "sns.barplot(data=______, \n",
        "            x=______, y=______)\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "::: {.callout-note collapse=\"true\" title=\"Hint\"}\n",
        "Los parámetros son los mismos que en el `lineplot` anterior.\n",
        ":::\n",
        "\n",
        "::: {.callout-tip collapse=\"true\" title=\"Solución\"}\n",
        "\n",
        "```{pyodide}\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "sns.barplot(data=mex_df, \n",
        "            x=\"year\", y=\"pop\")\n",
        "plt.show()\n",
        "```\n",
        "\n",
        ":::\n",
        "\n",
        "### Hagamos un gráfico de área\n",
        "\n",
        "`Seaborn` no tiene una función directa para gráficos de área como `geom_area()`, pero podemos usar `matplotlib` para esto con la función `fill_between()`.\n",
        "\n",
        "Modifica el siguiente código para generar un gráfico de áreas que nos muestre los años en el eje `x` y la población en el eje `y`.\n",
        "```{pyodide}\n",
        "#| exercise: grafico_areas\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.fill_between(mex_df['______'], mex_df['______'])\n",
        "plt.xlabel('Año')\n",
        "plt.ylabel('Población')\n",
        "plt.title('Población de México a lo largo del tiempo')\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "::: {.callout-note collapse=\"true\" title=\"Hint\"}\n",
        "Necesitas pasar la columna `year` como el primer argumento (eje x) y la columna `pop` como el segundo (eje y).\n",
        ":::\n",
        "\n",
        "::: {.callout-tip collapse=\"true\" title=\"Solución\"}\n",
        "\n",
        "```{pyodide}\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.fill_between(mex_df['year'], mex_df['pop'])\n",
        "plt.xlabel('Añ')\n",
        "plt.ylabel('Población')\n",
        "plt.title('Población de México a lo largo del tiempo')\n",
        "plt.show()\n",
        "```\n",
        "\n",
        ":::\n",
        "\n",
        "## Visualizar Distribución Normal\n",
        "\n",
        "- Recuerda que la distribución normal tiene 2 parámetros: la media ($mu$) y la desviación estándar ($sigma$).\n",
        "\n",
        "Para visualizarla en Python, usamos `numpy` para generar los datos y `seaborn` o `matplotlib` para graficar.\n",
        "\n",
        "Escribe el código de Python necesario para simular y graficar los valores de una distribución normal estándar (media=0, desviación estándar=1) usando `numpy.random.normal()` y `seaborn.histplot`.\n",
        "```{pyodide}\n",
        "#| exercise: distribucion_normal\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Simular 1000 datos de una distribución normal\n",
        "# con media 0 y desviación estándar 1\n",
        "datos = np.random.normal(loc=______, scale=______, size=1000)\n",
        "\n",
        "# Graficar la distribución\n",
        "sns.histplot(datos, kde=True) # kde=True añade una línea de densidad\n",
        "plt.title(\"Distribución Normal Estándar\")\n",
        "plt.xlabel(\"Valor\")\n",
        "plt.ylabel(\"Frecuencia\")\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "::: {.callout-note collapse=\"true\" title=\"Hint\"}\n",
        "La media se especifica con el parámetro `loc` y la desviación estándar con `scale`. Para una distribución normal estándar, ambos son 0 y 1 respectivamente.\n",
        ":::\n",
        "\n",
        "::: {.callout-tip collapse=\"true\" title=\"Solución\"}\n",
        "\n",
        "```{pyodide}\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Simular 1000 datos de una distribución normal\n",
        "# con media 0 y desviación estándar 1\n",
        "datos = np.random.normal(loc=0, scale=1, size=1000)\n",
        "\n",
        "# Graficar la distribución\n",
        "sns.histplot(datos, kde=True) # kde=True añade una línea de densidad\n",
        "plt.title(\"Distribución Normal Estándar\")\n",
        "plt.xlabel(\"Valor\")\n",
        "plt.ylabel(\"Frecuencia\")\n",
        "plt.show()\n",
        "```\n",
        "\n",
        ":::\n",
        "\n",
        "## Fuentes\n",
        "\n",
        "Esperamos que esta pequeña introducción a los gráficos en Python te sea de utilidad. A continuación te dejamos una serie de materiales que pueden resultar muy útiles para continuar aprendiendo:\n",
        "\n",
        "-   [Galería de ejemplos de Seaborn](https://seaborn.pydata.org/examples/index.html)\n",
        "-   [Tutorial de visualización de datos de Seaborn](https://seaborn.pydata.org/tutorial/introduction.html)\n",
        "-   [Galería de Matplotlib](https://matplotlib.org/stable/gallery/index.html)\n",
        "-   [Guía de uso de Pandas](https://pandas.pydata.org/docs/user_guide/index.html)\n",
        "\n",
        "## Licencia\n",
        "\n",
        "Este curso se comparte bajo la licencia [Creative Commons Attribution-ShareAlike 4.0 International License](https://creativecommons.org/licenses/by-sa/4.0/deed.es_ES) y fue realizado por [Yanina Bellini Saibene](https://yabellini.netlify.app/), modificado por Santiago Garcia y traducido a Python por un asistente de IA."
      ],
      "id": "d6674dad"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/home/santi/.local/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}