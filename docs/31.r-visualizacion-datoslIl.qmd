---
title: "Ejercicio II Visualización y Distribución de Datos"
subtitle: "Más tipos de gráficos con la gramática de ggplot"
format: live-html
sidebar: false
webr:
  packages:
  - ggplot2
  - gapminder
  - dplyr
  - ggseg
  - ggridges
  - ggstream
  - leaflet
  - ggiraph
engine: knitr
---

{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}

```{webr}
#| include: false
Argentina <- gapminder %>%
  filter(country == 'Argentina')
```


- Como haz visto, ggplot proporciona una forma sencilla y flexible de crear gráficos en R.
- En general, la estructura de un gráfico en ggplot sigue la siguiente forma:
    - Datos: el conjunto de datos que se utilizará para el gráfico.
    - Estética: los atributos visuales que se mapean a las variables del conjunto de datos.
    - Geometría: el tipo de gráfico que se desea crear.
- Por lo general, se sigue el siguiente formato:
    - `ggplot(data = datos, mapping = aes(x = variable_x, y = variable_y)) + geom_tipo()`


## Diferentes gráficos, código muy similar
- Observa cómo el código para diferentes tipos de gráficos es muy similar.
- Para mostrar esto usaremos los datos de `gapminder` y el dataset `Argentina` que ya hemos cargado por ti.
- Observa el código que usamos para generar el gráfico de dispersión, el gráfico de líneas y el gráfico de barras.

```{webr}
#| edit: false
#| runbutton: false

ggplot(data = gapminder, 
       mapping = aes(x = gdpPercap, y = lifeExp, 
                     color = continent, 
                     size = pop)) +
    geom_point()

```

```{webr}	
#| edit: false
#| runbutton: false

ggplot(data = Argentina, 
       mapping = aes(x = year, y = pop)) +
    geom_line()

```

```{webr}
#| edit: false
#| runbutton: false

ggplot(data = Argentina, 
       mapping = aes(x = year, y = pop)) +
    geom_col()

```	

## Más ejemplos

- En los siguientes ejemplos vamos a utilizar disintos paquetes de R que utilizan una gramática muy similar a ggplot.
- El objetivo es que veas cómo la gramática de los gráficos es muy similar en diferentes paquetes de R. Sin embargo, el gráfico resultante  puede ser muy diferente.

```{webr}
library(ggseg)

ggplot() +
  geom_brain(atlas = dk) + # geom para atlas cerebral
  guides(fill = guide_legend(ncol = 4)) + # guía de leyenda
  theme_void() + # tema visual
  theme(legend.position = "bottom",
        legend.text = element_text(size = 8))

```


```{webr}
#| warning: false

library(ggridges) # paquete para gráficos de densidad
library(viridis) # paquete para paletas de colores

# datos para gráfico de densidad de diamantes
df <- diamonds[1:100, c("color", "depth")]

ggplot(df, aes(x = depth, y = color, fill = stat(x))) +
  geom_density_ridges_gradient() + # geom para gráfico de densidad
  scale_fill_viridis_c(name = "Depth", option = "C") # escala de color

```


```{webr}
library(ggstream) # paquete para gráficos de flujo

# datos para gráfico de flujo
cols <- c("#FFB400", "#FFC740", "#C20008", "#FF020D", "#13AFEF")

ggplot(blockbusters, aes(x = year, y = box_office, fill = genre)) +
  geom_stream(color = 1, lwd = 0.25) + # geom para gráfico de flujo
  scale_fill_manual(values = cols) + # escala de color con ek vector cols
  theme_minimal() # tema visual

```


- El siguiente gráfico es interactivo. Puedes pasar el cursor sobre los puntos para ver información adicional.
- Observa que la estructura del código es muy similar a la que hemos visto en ggplot, solo que en lugar de usar `geom_point()` usamos `geom_point_interactive()` y para visualizarlo, en lugar de usar plot() o print() usamos `girafe(ggobj = )`. El argumento `tooltip` es para mostrar información adicional al pasar el cursor sobre los puntos, en este caso, el modelo del auto que está en la variable `model`. `data_id` es para identificar cada punto de manera única. `hover_nearest` es para que al pasar el cursor sobre los puntos, se muestre la información del punto más cercano.
- Vamos a usar el dataset `mpg` que ya viene cargado en R y corresponde a datos de consumo de combustible de diferentes autos.

```{webr}
#| warning: false
library(ggiraph)

g <- ggplot(mpg, aes(x = displ, y = cty)) +
      geom_point_interactive(aes(tooltip = model, data_id = model), 
                                size = 3, hover_nearest = TRUE)

girafe(ggobj = g)

```

- Aunque el siguiente gráfico es un poco diferente, observa que la estructura del código es muy similar a la que hemos visto en ggplot.
- En lugar de `ggplot()` usamos `leaflet()`, en lugar de `geom_` usamos `add_` y en lugar de `aes(x, y)` usamos `lng` y `lat` para las coordenadas.

```{webr}
#| warning: false

library(leaflet)

leaflet() %>%
  addTiles() %>% 
  addPopups(lng=-99.18735796750228, 
            lat=19.33348477957739, 
            popup="Biblioteca Central")

```

## Ejercicio

- Explora [este enlace](https://r-charts.com/ggplot2/) y [este enlace](https://r-graph-gallery.com/ggplot2-package.html) y busca algunas gráficas que te parezcan interesantes.
- Intenta reeplicar la gráfica en tu RStudio de tu computadora. Puedes usar la consola que está en la parte inferior de la página, aunque te recomiendo que lo hagas en tu RStudio para mayor compatibilidad.
- Estas páginas vienen con el código necesario para replicar las gráficas.
- Intenta modificar los datos y los atributos visuales para ver cómo cambia la gráfica.
- Elige alguna gráfica que tenga un codigo facil de entender con la gramática de ggplot que hemos visto en este módulo.
- El objetivo es que veas que con lo poco que hemos visto en este módulo, puedes crear gráficas muy interesantes y complejas gracias a que se tiende a seguir una gramática muy similar en diferentes paquetes de R.
- Como verás, hay paquetes muy especializados que te permiten crear gráficas muy interesantes y complejas para tu área de estudio.

```{webr}
#| min-lines: 2

```