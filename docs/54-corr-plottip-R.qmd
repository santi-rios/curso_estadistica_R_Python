---
title: "Correlación - Tip para graficos listos para publicar"
subtitle: "Introducción a ggpubr"
author:
  - name: "Mtro. Santiago Ríos"
    email: santiagoboo99@gmail.com
    affiliation: 
      - name: Cursos Orca
        city: CDMX
        url: orcaasesina.com
format: 
    live-html:
        highlightStyle: github
        highlightLines: true
        theme: vapor
toc: true
sidebar: false
webr:
    packages: 
        - ggpubr
        - dplyr
        - ggExtra
    render-df: gt-interactive
engine: knitr
---

{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}


- Los diagramas de dispersión se utilizan para mostrar la relación entre dos variables, x - y. 
- En esta lección, vamos a crear gráficos de dispersión en R y a añadir información adicional para hacerlos más informativos y atractivos.
- Utilizaremos funciones auxiliares del paquete `ggpubr` de R para mostrar automáticamente el coeficiente de correlación y el nivel de significancia en el gráfico. 
- Este paquete utiliza una sintaxis similar a `ggplot2`, pero está diseñado para hacer que los gráficos sean más fáciles de personalizar y añadir información adicional, como el coeficiente de correlación.


## Instalar y cargar paquetes necesarios

Para instalar el paquete `ggpubr`, puedes usar el siguiente comando:

```r
install.packages("ggpubr")
```

Si tienes problemas con el comando anterior, también puedes instalarlo desde github con el siguiente comando:

```r
# Install
if(!require(devtools)) install.packages("devtools")
devtools::install_github("kassambara/ggpubr")
```

Para cargar el paquete `ggpubr`, puedes usar el siguiente comando:

```{webr}
#| edit: false
#| runbutton: false

# Cargar librerías necesarias
library(ggpubr)
```

Para este ejemplo, vamos a usar el conjunto de datos `mtcars` que viene incluido en R. Este conjunto de datos contiene información sobre diferentes modelos de automóviles, incluyendo el número de cilindros, la potencia bruta, la velocidad máxima, y otras variables.

```{webr}
#| include: false

# Load data
data("mtcars")
df_mtcars <- mtcars
# Convert cyl as a grouping variable
df$cyl <- as.factor(df$cyl)


```

```{webr}
#| edit: false
#| runbutton: false

# Ver los datos
head(df_mtcars)
```

## Crear un gráfico de dispersión con ggpubr
- Para crear un gráfico de dispersión con `ggpubr`, usaremos la función `ggscatter()` del paquete `ggpubr`.
- Esta función es similar a `ggplot2::geom_point()`, pero añade automáticamente el coeficiente de correlación y el nivel de significancia en el gráfico.
- A continuación, vamos a crear un gráfico de dispersión entre la variable `mpg` (millas por galón) y la variable `wt` (peso en miles de libras) del conjunto de datos `mtcars`.
- Observa que la estructura de la función `ggscatter()` es similar a la de `ggplot2`, con algunas diferencias en los argumentos; por ejemplo, `add = "reg.line"` añade una línea de regresión al gráfico.
- Sin embargo, la idea es similar: especificamos el tipo de gráfico, los datos, las variables `x y`, y otros argumentos para personalizar el gráfico.

```{webr}
#| autorun: true

# Gráfico de dispersión con ggpubr

ggscatter(df_mtcars, # datos
          x = "mpg", # variable x
          y = "wt", # variable y
          add = "reg.line", # añadir línea de regresión
          xlab = "Millas por galón", # etiqueta eje x
          ylab = "Peso en miles de libras", # etiqueta eje y
          title = "Gráfico de dispersión entre mpg y wt" # título del gráfico
          ) +
  stat_cor(method = "pearson", # método de correlación 
           label.x = 25, label.y = 5 # posición del texto del coeficiente
           )  

```

- Con tan solo unas pocas líneas de código, hemos creado un gráfico de dispersión informativo y atractivo que muestra la relación entre las variables `mpg` y `wt` del conjunto de datos `mtcars`.
- El gráfico incluye: 
  - una línea de regresión, la cual muestra la tendencia general de los datos
  - el coeficiente de correlación de Pearson, que indica la fuerza y la dirección de la relación entre las variables.
  - el nivel de significancia (p-valor) del coeficiente de correlación, que indica si la relación es estadísticamente significativa. Todavía no vemos a fondo los valores p, pero recuerda que un valor p menor a 0.05 generalmente se considera estadísticamente significativo, es decir, se rechaza la hipótesis nula de que no hay relación entre las variables.

### Agrupar por una variable categórica

- Como hemos visto en otros gráficos, podemos especificar una variable categórica para agrupar los puntos en el gráfico de dispersión.
- Por ejemplo, podemos usar la variable `cyl` (número de cilindros) para agrupar los puntos en el gráfico de dispersión. Además, podemos personalizar los colores y las formas de los puntos para cada grupo. 
  - En ggplot, hacíamos esto de esta manera: `(aes(shape = cyl, color = cyl))`.
- En ggpubr, es muy similar, con la ventaja que ahora podemos añadir el coeficiente de correlación y el nivel de significancia para cada grupo. Todo de manera automática.
  - Para obtener el coeficiente de correlación por grupos, usamos `stat_cor(aes(color = cyl), label.x = 25)`. Esto añade el coeficiente de correlación para cada grupo en la posición `x = 25`. El eje y se ajusta automáticamente.  
- Usamos `palette = "jco"` para especificar una paleta de colores predefinida. En ggpubr, hay varias paletas de colores disponibles para personalizar los gráficos. Incluye paletas de journals científicos como "jco" (Journal of Cell), "npg" (Nature Publishing Group), y "lancet". Puedes conocer más sobre las paletas de colores en la documentación del paquete ([en este enlace](https://rpkgs.datanovia.com/ggpubr/reference/get_palette.html))

```{webr}
#| autorun: true
library(dplyr)

# Convertir cyl a factor para agrupar
df_mtcars$cyl <- as.factor(df_mtcars$cyl)

# Gráfico de dispersión con ggpubr
ggscatter(df_mtcars, # datos
          x = "mpg", # variable x
          y = "wt", # variable y
          add = "reg.line", # añadir línea de regresión
          xlab = "Millas por galón", # etiqueta eje x
          ylab = "Peso en miles de libras", # etiqueta eje y
          title = "Gráfico de dispersión entre mpg y wt", # título del gráfico

          color = "cyl", # Color por grupos "cyl" 
          shape = "cyl", # Forma por grupos "cyl" 
          palette = "jco" # Paleta de colores           
          ) +
 stat_cor(aes(color = cyl), 
          p.accuracy = 0.001, # Precisión del p-valor a 3 decimales
          label.x = 25) # Añadir coeficiente de correlación por grupos

```

### Agregar gráficos marginales

- Otra característica interesante de `ggpubr` es la capacidad de añadir gráficos marginales a los gráficos de dispersión.
- Los gráficos marginales muestran la distribución de las variables `x` e `y` en los márgenes del gráfico de dispersión.
- Como vimos previamente, para visualizar la distribución de una variable, podemos usar histogramas, densidades y/o boxplots. 
- Para esto, usamos otro paquete de ayuda llamado `ggExtra`, que nos permite añadir gráficos marginales a los gráficos de dispersión. Puedes instalarlo con el siguiente comando: `install.packages(“ggExtra”)`.
  - Primero, guardamos el gráfico de dispersión en un objeto `p`.
  - Luego, usamos la función `ggMarginal()` para añadir un gráfico marginal al gráfico de dispersión. Especificamos el tipo de gráfico marginal con el argumento `type`. Por ejemplo, `type = "density"` añade un gráfico de densidad en los márgenes, y `type = "boxplot"` añade un gráfico de caja y bigotes (boxplot) en los márgenes. 

```{webr}
#| autorun: true

# install.packages(“ggExtra”)
library("ggExtra")

p <- ggscatter(iris, 
               x = "Sepal.Length", 
               y = "Sepal.Width",
               color = "Species", 
               palette = "jco",
               size = 3, 
               alpha = 0.6
               )

# Densidad
ggMarginal(p, type = "density")


```


```{webr}
#| autorun: true

# install.packages(“ggExtra”)
library("ggExtra")

p <- ggscatter(iris, 
               x = "Sepal.Length", 
               y = "Sepal.Width",
               color = "Species", 
               palette = "jco",
               size = 3, 
               alpha = 0.6
               )

# Boxplot
ggMarginal(p, type = "boxplot")

```


## Recursos adicionales

- Documentación oficial de `ggpubr`: [enlace](https://rpkgs.datanovia.com/ggpubr/index.html)
- Tutorial de `ggpubr` en DataNovia: [enlace](http://www.sthda.com/english/articles/24-ggpubr-publication-ready-plots/78-perfect-scatter-plots-with-correlation-and-marginal-histograms/)
- Paletas de colores disponibles en `ggpubr`: [enlace](https://rpkgs.datanovia.com/ggpubr/reference/set_palette.html)