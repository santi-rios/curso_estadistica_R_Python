{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e8835ee2",
   "metadata": {},
   "source": [
    "---\n",
    "title: \"ANCOVA: Análisis de Covarianza con Python\"\n",
    "author:\n",
    "  - name: \"Mtro. Santiago Ríos\"\n",
    "    email: santiagoboo99@gmail.com\n",
    "    affiliation: \n",
    "      - name: Cursos Orca\n",
    "        city: CDMX\n",
    "        url: orcaasesina.com\n",
    "format: \n",
    "    live-html\n",
    "        # highlight-style: github\n",
    "        # highlight-lines: true\n",
    "        # theme: solar\n",
    "toc: true\n",
    "sidebar: false\n",
    "pyodide: \n",
    "    packages: \n",
    "        - pandas\n",
    "        - matplotlib\n",
    "        - seaborn\n",
    "        - numpy\n",
    "        - statsmodels\n",
    "---\n",
    "\n",
    "\n",
    "### Lección sobre ANCOVA: Análisis de Covarianza en Ciencias de la Salud y Biológicas\n",
    "\n",
    "\n",
    "#### **Introducción al ANCOVA**\n",
    "\n",
    "El **Análisis de Covarianza (ANCOVA)** es una extensión del ANOVA que incluye **predictores continuos** (covariables) junto con los predictores categóricos. ANCOVA permite ajustar las diferencias entre grupos teniendo en cuenta una covariable continua, como la edad, el peso, o cualquier otra medida continua que pueda influir en la variable dependiente.\n",
    "\n",
    "En un **ANCOVA**, el modelo lineal incluye tanto las **variables categóricas** como una o más **variables continuas**. Este análisis es útil cuando queremos ajustar los efectos de las variables categóricas por una covariable, mejorando la precisión de nuestras estimaciones.\n",
    "\n",
    "\n",
    "\n",
    "### **Puntos clave a enseñar:**\n",
    "\n",
    "1.  **ANCOVA como modelo lineal**: El modelo lineal en un ANCOVA es similar a los que usamos en ANOVA, pero con la adición de un término que representa la covariable continua. Por ejemplo, en un ANCOVA unidireccional, el modelo sería:\n",
    "\n",
    "    \\[ y = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2 + \\dots + \\beta_3 \\cdot \\text{age} \\]\n",
    "\n",
    "    -   \\(\\beta_0\\) es la intersección (la media para el grupo de referencia cuando la covariable es 0).\n",
    "    -   \\(\\beta_1\\), \\(\\beta_2\\), etc. son los efectos de los grupos categóricos.\n",
    "    -   \\(\\beta_3\\) es el efecto de la covariable continua (en este caso, la edad).\n",
    "\n",
    "2.  **Ajuste por covariables**: El objetivo principal del ANCOVA es ajustar las diferencias entre los grupos teniendo en cuenta la influencia de una covariable. Esto permite estimar los efectos de los grupos categóricos de manera más precisa.\n",
    "\n",
    "3.  **Codificación dummy**: `statsmodels` maneja automáticamente la codificación dummy para las variables categóricas cuando se usa la sintaxis de fórmula.\n",
    "\n",
    "4.  **Interpretación**: En un ANCOVA, se pueden interpretar tanto los **efectos principales** de los grupos categóricos como el efecto de la covariable continua.\n",
    "\n",
    "---\n",
    "\n",
    "### **Ejemplo en Python: ANCOVA**\n",
    "\n",
    "A continuación, realizamos un ANCOVA utilizando `statsmodels` y visualizamos los resultados con `seaborn`.\n",
    "\n",
    "#### **Paso 1: Generar los datos**\n",
    "\n",
    "Utilizamos datos simulados y añadimos una covariable continua (`age`), que está correlacionada con la variable dependiente `value`.\n",
    "\n",
    "```{pyodide}\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import statsmodels.api as sm\n",
    "import statsmodels.formula.api as smf\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Función para generar datos con media y sd fijas\n",
    "def rnorm_fixed(n, mean, sd):\n",
    "    x = np.random.normal(size=n)\n",
    "    x = x - np.mean(x)\n",
    "    x = x / np.std(x)\n",
    "    x = x * sd + mean\n",
    "    return x\n",
    "\n",
    "# Generar los datos con una covariable continua (edad)\n",
    "N = 20  # Número de muestras por grupo\n",
    "D = pd.DataFrame({\n",
    "  'value': np.concatenate([rnorm_fixed(N, 0, 1), rnorm_fixed(N, 1, 1), rnorm_fixed(N, 0.5, 1)]),\n",
    "  'group': np.repeat(['a', 'b', 'c'], N)\n",
    "})\n",
    "\n",
    "# Añadir una covariable continua (edad), correlacionada con la variable dependiente\n",
    "D['age'] = D['value'] + rnorm_fixed(len(D), mean=0, sd=3)\n",
    "\n",
    "# Visualizar las primeras filas de los datos\n",
    "D.head()\n",
    "```\n",
    "\n",
    "#### **Paso 2: Visualización del ANCOVA**\n",
    "\n",
    "Creamos una gráfica que muestra la relación entre la covariable `age` y la variable dependiente `value`, utilizando diferentes colores para los grupos.\n",
    "\n",
    "```{pyodide}\n",
    "\n",
    "# Gráfico del ANCOVA usando seaborn\n",
    "sns.lmplot(data=D, x='age', y='value', hue='group', ci=None)\n",
    "plt.title('ANCOVA: Análisis de Covarianza')\n",
    "plt.show()\n",
    "```\n",
    "\n",
    "#### **Paso 3: Códigos en Python: ANCOVA**\n",
    "\n",
    "Podemos realizar el ANCOVA utilizando `statsmodels`.\n",
    "\n",
    "```{pyodide}\n",
    "\n",
    "# ANCOVA con statsmodels\n",
    "ancova_model = smf.ols('value ~ group + age', data=D).fit()\n",
    "ancova_table = sm.stats.anova_lm(ancova_model, typ=2)\n",
    "\n",
    "print(\"--- Tabla ANCOVA ---\")\n",
    "print(ancova_table)\n",
    "\n",
    "print(\"\\n--- Resumen del Modelo ---\")\n",
    "print(ancova_model.summary())\n",
    "```\n",
    "\n",
    "#### **Paso 4: Interpretación de los resultados**\n",
    "\n",
    "En el resultado del ANCOVA, podemos examinar los efectos principales de los grupos y de la covariable `age`. La tabla ANCOVA nos muestra la significancia de cada término en el modelo.\n",
    "\n",
    "---\n",
    "\n",
    "### **Ejercicio Práctico**\n",
    "\n",
    "1.  **Ejercicio 1**: Usa el conjunto de datos `mtcars` para realizar un ANCOVA, comparando el consumo de combustible (`mpg`) según el número de cilindros (`cyl`), ajustando por el peso del automóvil (`wt`).\n",
    "\n",
    "```{pyodide}\n",
    "# exercise: ancova_mtcars\n",
    "from statsmodels.datasets import get_rdataset\n",
    "import statsmodels.formula.api as smf\n",
    "import statsmodels.api as sm\n",
    "\n",
    "mtcars = get_rdataset(\"mtcars\", \"datasets\", cache=True).data\n",
    "\n",
    "# ANCOVA con mtcars\n",
    "ancova_mpg_cyl_wt_model = smf.ols('mpg ~ C(cyl) + wt', data=mtcars).fit()\n",
    "ancova_mpg_cyl_wt_table = sm.stats.anova_lm(ancova_mpg_cyl_wt_model, typ=2)\n",
    "\n",
    "# Mostrar resultados\n",
    "print(ancova_mpg_cyl_wt_table)\n",
    "print(ancova_mpg_cyl_wt_model.summary())\n",
    "```\n",
    "\n",
    "::: {.callout-important collapse=\"true\" title=\"Respuesta\"}\n",
    "```python\n",
    "from statsmodels.datasets import get_rdataset\n",
    "mtcars = get_rdataset(\"mtcars\", \"datasets\", cache=True).data\n",
    "\n",
    "# ANCOVA con mtcars\n",
    "ancova_mpg_cyl_wt_model = smf.ols('mpg ~ C(cyl) + wt', data=mtcars).fit()\n",
    "ancova_mpg_cyl_wt_table = sm.stats.anova_lm(ancova_mpg_cyl_wt_model, typ=2)\n",
    "\n",
    "# Mostrar resultados\n",
    "print(ancova_mpg_cyl_wt_table)\n",
    "print(ancova_mpg_cyl_wt_model.summary())\n",
    "```\n",
    ":::\n",
    "\n",
    "---\n",
    "\n",
    "### **Conclusión**\n",
    "\n",
    "El **ANCOVA** es una herramienta estadística poderosa que combina los efectos de factores categóricos y covariables continuas en un solo modelo. Este análisis permite ajustar por covariables, proporcionando estimaciones más precisas de los efectos de los grupos categóricos. Al entender cómo integrar covariables en un **modelo lineal**, los estudiantes pueden aplicar ANCOVA para analizar datos más complejos en ciencias de la salud y biológicas."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3",
   "path": "/home/santi/.local/share/jupyter/kernels/python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
