---
title: "Distribuciones de Probabilidad en Python"
subtitle: "Simulación y visualización con numpy, scipy y seaborn"
format:
  live-html:
    toc: true
sidebar: false
pyodide: 
    packages: 
        - pandas
        - matplotlib
        - seaborn
        - numpy
resources:
  - datos
engine: knitr
---

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}}

## Introducción y Objetivos

- En Python, puedes simular y visualizar distribuciones de probabilidad usando `numpy`, `scipy.stats` y `seaborn`/`matplotlib`.
- Aquí exploraremos la distribución normal, binomial y de Poisson, y cómo graficarlas y simular datos.

---

## Distribución Normal

```{pyodide}
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

np.random.seed(42)
datos_normales = np.random.normal(loc=50, scale=10, size=1000)
df_normales = pd.DataFrame({'valor': datos_normales})

plt.figure(figsize=(8,5))
sns.histplot(df_normales['valor'], bins=30, stat="density", color="skyblue", edgecolor="black")
sns.kdeplot(df_normales['valor'], color="darkblue", linewidth=2)
plt.title("Distribución Normal")
plt.xlabel("Valores")
plt.ylabel("Densidad")
plt.show()
```

---

## Distribución Binomial

```{pyodide}
np.random.seed(123)
resultados = np.random.binomial(n=10, p=0.5, size=100)

plt.figure(figsize=(8,5))
sns.histplot(resultados, bins=range(0,12), color="skyblue", edgecolor="black")
plt.title("Distribución del Número de Caras en 100 Lanzamientos de Moneda")
plt.xlabel("Número de Caras Obtenidas cada 10 Lanzamientos")
plt.ylabel("Frecuencia")
plt.show()
```

- Si la moneda está cargada (p=0.85):

```{pyodide}
np.random.seed(123)
resultados_cargada = np.random.binomial(n=10, p=0.85, size=100)

plt.figure(figsize=(8,5))
sns.histplot(resultados_cargada, bins=range(0,12), color="skyblue", edgecolor="black")
plt.title("Distribución del Número de Caras (Moneda Cargada)")
plt.xlabel("Número de Caras Obtenidas")
plt.ylabel("Frecuencia")
plt.show()
```

---

## Distribución de Poisson

```{pyodide}
np.random.seed(12)
mutaciones = np.random.poisson(lam=3, size=1000)

plt.figure(figsize=(8,5))
sns.histplot(mutaciones, bins=range(0, max(mutaciones)+2), color="lightgreen", edgecolor="black")
plt.title("Distribución de Mutaciones en Células (Poisson)")
plt.xlabel("Número de Mutaciones por Célula")
plt.ylabel("Frecuencia")
plt.show()
```

---

## Otras Distribuciones

- Además de la normal, binomial y Poisson, existen muchas otras distribuciones en `scipy.stats`.
- Ejemplos: chi-cuadrada (`scipy.stats.chi2`), t de Student (`scipy.stats.t`), F de Fisher (`scipy.stats.f`), etc.
- Consulta la [documentación de scipy.stats](https://docs.scipy.org/doc/scipy/reference/stats.html) para más detalles.

---

## Reflexión

- ¿Cómo cambia la forma de la distribución al modificar los parámetros?
- ¿Qué tipo de variables reales se ajustan a cada distribución?

Esta lección te da una base para simular y visualizar distribuciones de probabilidad en Python.
