---
title: "Introducción a los Tipos de Variables en Estadística con R"
sidebar: false
webr:
    packages: 
        - dplyr
format: live-html
pyodide: 
    packages: 
        - numpy
        - pandas
#         - matplotlib
#         - seaborn
#         - statsmodels
engine: knitr
---

{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}

## Introducción

En ciencia, para poner a prueba hipótesis y responder preguntas de investigación, medimos variables, que son elementos que pueden cambiar o variar. Estas variables pueden diferir entre personas dentro de una población (como la altura), entre lugares (como los niveles de desempleo) o con el tiempo (como el estado de ánimo a lo largo del día).

Las hipótesis generalmente se formulan en términos de dos variables: una que se propone como la causa y otra como el efecto o resultado.

---

## Conceptos Clave

### Variable Independiente (VI)

- Es la variable que se considera la causa en una relación. 
- En experimentos, la variable independiente es aquella que se manipula deliberadamente para observar su impacto en otra variable.
- Ejemplo: En un experimento sobre el impacto de las horas de estudio en el rendimiento académico, las "horas de estudio" serían la variable independiente.

### Variable Dependiente (VD)

- Es la variable que se cree que es afectada por la variable independiente. Es el resultado que se mide.
- Ejemplo: Continuando con el ejemplo anterior, la "calificación en el examen" sería la variable dependiente, ya que depende de las horas de estudio.


### Variable Predictora y de Resultado
- En estudios donde no se manipulan las variables directamente (como en estudios observacionales o correlacionales), los términos "variable independiente" y "variable dependiente" pueden no ser los más adecuados.
- En su lugar, se utilizan los términos variable predictora (equivalente a la independiente) y variable de resultado (equivalente a la dependiente). Este enfoque es útil en estudios donde una o más variables se utilizan para predecir el resultado.
- Ejemplo: En un estudio donde se analiza si el nivel socioeconómico predice el rendimiento académico, el nivel socioeconómico sería la variable predictora, mientras que el rendimiento académico sería la variable de resultado.



# Tipos de Variables

## Introducción

Las variables pueden clasificarse en diferentes tipos, lo que nos ayuda a comprender mejor los datos y a aplicar las técnicas estadísticas adecuadas.

### Variables Categóricas (Cualitativas)

Estas variables representan categorías o grupos. Pueden clasificarse en diferentes subtipos:

1. Nominales:
- No tienen un orden particular. Las categorías son solo nombres o etiquetas.
- Ejemplo: Tipo de mascota (perro, gato, pájaro).

2. Ordinales:
- Tienen un orden o jerarquía, pero las diferencias entre categorías no son cuantificables o no son iguales.
- Ejemplo: Puesto en una carrera (primero, segundo, tercero).
- Ejemplo: Grados de satisfacción (muy insatisfecho, insatisfecho, satisfecho, muy satisfecho).

![](http://orcaasesina.com/wp-content/uploads/2024/10/38f5ed46-9dcd-4981-9ae0-497fb20aa65c_rw_1920.png)

### Variables Binarias (Dicotómicas)

- Solo tienen dos categorías mutuamente excluyentes.
- Ejemplo: Estado civil (casado/no casado), resultado de un examen (aprobado/reprobado).

### Variables Cuantitativas (Numéricas)

Estas variables representan cantidades o valores numéricos. Pueden ser de dos tipos:

1. Continuas:
- Pueden tomar cualquier valor dentro de un rango. Es decir, entre dos valores cualesquiera, puede haber infinitos valores intermedios.
- Ejemplo: Altura, peso, temperatura.
2. Discretas:
- Solo pueden tomar ciertos valores específicos, generalmente enteros.
- Ejemplo: Número de hijos, número de autos en una familia.

![](http://orcaasesina.com/wp-content/uploads/2024/10/5c0b4bea-b51d-42cb-b0bb-1bc1d59ac0c5_rw_1920.png)


### Importancia de los Tipos de Variables

Es fundamental comprender el tipo de variable que estamos analizando, ya que esto influirá en las técnicas estadísticas que debemos utilizar. Por ejemplo, las pruebas aplicables a datos categóricos pueden ser diferentes de las que aplicamos a datos nu```{pyodide}méricos.

## Ejercicio Práctico en R: Trabajando con Diferentes Tipos de Variables

- Como veremos en lo que resta del curso, es importante entender qué tipo de variable estamos tratando para elegir el método de análisis adecuado.
- Identifica los diferentes tipos de variables que tenemos en el siguiente conjunto de datos:
- Los datos ya se encuentran cargados en el ejercicio en la variable `datos_tipos_variables`
- Primero, vamos a explorar los datos con la función `head()` para ver las primeras filas.

::: {.panel-tabset group="language"}

## R

```{webr}
#| include: false
#| autorun: true
library(ggplot2)

# Datos simulados
set.seed(123)
resultado_examen <- factor(c("Fail", "Pass", "Merit", "Distinction"), ordered = TRUE)
estado_civil <- factor(c("Soltero", "Casado", "Divorciado", "Viudo"))
vivo_muerto <- factor(c("Vivo", "Muerto"), levels = c("Vivo", "Muerto"))
temperatura <- rnorm(100, mean=22, sd=5)  # Variable de intervalo
anxiety_score <- runif(100, min=0, max=21)  # Variable de razón

datos_tipos_variables <- data.frame(
  ID = 1:100,
  Resultado_Examen = sample(resultado_examen, 100, replace = TRUE),
  Estado_Civil = sample(estado_civil, 100, replace = TRUE),
  Vivo_Muerto = sample(vivo_muerto, 100, replace = TRUE),
  Temperatura = temperatura,
  Anxiety_Score = anxiety_score
)

```


```{webr}

head(datos_tipos_variables)

```

## Python

```{pyodide}
#| include: false
#| autorun: true
import numpy as np
import pandas as pd

np.random.seed(123)

resultado_examen = pd.Categorical(
    ["Fail", "Pass", "Merit", "Distinction"],
    categories=["Fail", "Pass", "Merit", "Distinction"],
    ordered=True
)
estado_civil = pd.Categorical(
    ["Soltero", "Casado", "Divorciado", "Viudo"],
    categories=["Soltero", "Casado", "Divorciado", "Viudo"]
)
vivo_muerto = pd.Categorical(
    ["Vivo", "Muerto"],
    categories=["Vivo", "Muerto"]
)
temperatura = np.random.normal(loc=22, scale=5, size=100)
anxiety_score = np.random.uniform(low=0, high=21, size=100)

datos_tipos_variables = pd.DataFrame({
    "ID": np.arange(1, 101),
    "Resultado_Examen": np.random.choice(resultado_examen, 100, replace=True),
    "Estado_Civil": np.random.choice(estado_civil, 100, replace=True),
    "Vivo_Muerto": np.random.choice(vivo_muerto, 100, replace=True),
    "Temperatura": temperatura,
    "Anxiety_Score": anxiety_score
})

```


```{pyodide}
import pandas as pd
df = pd.DataFrame(datos_tipos_variables)
print(df.head())

```

:::

- A dimple vista, podemos determinar lo siguiente:
- `ID`: Es una variable discreta.
- `Resultado_Examen`: Es una variable categórica ordinal.
- `Estado_Civil`: Es una variable categórica nominal.
- `Vivo_Muerto`: Es una variable categórica binaria.
- `Temperatura`: Es una variable continua.
- `Anxiety_Score`: Es una variable continua.

Sin embargo, existen diferentes formas de explorar los tipos de datos con diferentes funciones en R.


::: {.panel-tabset group="language"}

## R


str()
- Podemos usar la función `str()` para obtener una descripción de las variables en el conjunto de datos.
- Esta función nos proporciona información sobre el tipo de variable y los primeros valores de cada columna.

```{webr}

str(datos_tipos_variables)

```


## Python


```{pyodide}
print(df.dtypes)
```

:::

- Observa que nos dice:
- El número de observaciones (100).
- El número de variables (6).
- El nombre de las variables.
- ID es identificada como un número entero (Int que significa integer).
- Resultado_Examen, Estado_Civil y Vivo_Muerto son factores. Los factores son variables categóricas. También nos muestra los niveles de cada factor, que son las categorías o valores que puede tomar la variable. Por ejemplo, Resultado_Examen tiene 4 niveles: Fail, Pass, Merit, Distinction. La palabra Ord. significa que es una variable ordinal.
- Las variables Temperatura y Anxiety_Score son numéricas (num).


::: {.panel-tabset group="language"}

## R

 summary()
- Esta función nos proporciona un resumen de las variables en el conjunto de datos.
- Observa que para las variables categóricas, nos muestra la frecuencia de cada nivel, es decir, cuántas veces aparece cada categoría en el conjunto de datos.
- Para las variables numéricas, nos muestra un resumen estadístico, incluyendo la media, la mediana, los cuartiles, el mínimo y el máximo.

```{webr}

summary(datos_tipos_variables)

```


## Python

```{pyodide}
import pandas as pd

df.describe(datos_tipos_variables)

```

:::


::: {.panel-tabset group="language"}

## R

### glimpse()

- Podemos usar la función `glimpse()` del paquete `dplyr` para obtener un resumen de las variables en el conjunto de datos.
- Una ventaja de ver los datos con esta función es que nos muestra el tipo de variable que R ha asignado a cada columna.
- NOTa: en esta presentación no se alcanza a visualizar la salida completa de la función `glimpse()`, pero en tu computadora podrás verla completa.

```{webr}
library(dplyr)
datos_tipos_variables %>% glimpse()

```


## Python

```{pyodide}
df.info()
```

:::


::: {.panel-tabset group="language"}

## R

### sapply() y class()

- sapply() es una función que aplica una función a cada elemento de una lista o vector.
- class() es una función que nos permite obtener el tipo de variable de un objeto en R.
- Podemos usar sapply() con class() para obtener el tipo de variable de cada columna en el conjunto de datos.

```{webr}

sapply(datos_tipos_variables, class)

```

## Python

### sapply() y class() / dtypes
- En pandas, podemos usar el atributo `.dtypes` para obtener el tipo de dato de cada columna en el DataFrame.


```{pyodide}

df.dtypes
```

:::




## Cambiando el Tipo de Variable (recodificar)

::: {.panel-tabset group="language"}

## R


- A veces, necesitamos cambiar el tipo de variable de una columna en un conjunto de datos.
- Por ejemplo, si una variable categórica se ha leído como numérica, necesitamos cambiarla.
- Esto se conoce como *recodificar*.

```{webr}
# A veces, necesitamos cambiar el tipo de variable de una columna en un conjunto de datos.
# Por ejemplo, si una variable categórica se ha leído como numérica, necesitamos cambiarla.
# Esto se conoce como *recodificar*.

# Cambiar la variable ID a categoría
# Creamos una copia para no modificar el dataframe original

datos_nuevos <- datos_tipos_variables %>%
  mutate(ID = as.factor(ID))

str(datos_nuevos)

```


## Python


```{pyodide}
# A veces, necesitamos cambiar el tipo de variable de una columna en un conjunto de datos.
# Por ejemplo, si una variable categórica se ha leído como numérica, necesitamos cambiarla.
# Esto se conoce como *recodificar*.

# Cambiar la variable ID a categoría
# Creamos una copia para no modificar el dataframe original

datos_nuevos = df.copy()
datos_nuevos['ID'] = datos_nuevos['ID'].astype('category')

datos_nuevos.info()
```

:::

# Ejercicio


## Ejercicio 1: Variables de Carácter

En este ejercicio, los estudiantes deben crear una **variable de carácter** y verificar su tipo de dato.

### Instrucciones: 

1. Reemplaza el guion bajo (`______`) por un texto entre comillas para crear una variable de carácter.
2. Corre el código para verificar que el tipo de dato sea correcto.


::: {.panel-tabset group="language"}

## R

```{webr}
#| exercise: eval_variables_ex3

# Crear una variable de carácter
caracter <- "______"

print(caracter)

# Verificamos el tipo de dato
typeof(caracter)
```

El tipo de dato debería ser `character`. Si el estudiante ha hecho todo correctamente, la salida de `typeof(caracter)` será `"character"`.


```{webr}
#| exercise: eval_variables_ex3
#| check: true

# Evaluamos si la variable es de tipo 'character'
if (identical(typeof(caracter), "character")) {
  list(correct = TRUE, message = "¡Correcto! La variable es de tipo carácter.")
} else {
  list(correct = FALSE, message = "Incorrecto. Asegúrate de que la variable sea de tipo carácter.")
}
```

## Python


```{pyodide}
#| exercise: eval_variables_ex3py

# Crear una variable de carácter
caracter = "______"

print(caracter)

# Verificamos el tipo de dato
type(caracter)
```

El tipo de dato debería ser `character`. Si el estudiante ha hecho todo correctamente, la salida de `typeof(caracter)` será `"character"`.


```{pyodide}
#| exercise: eval_variables_ex3py
#| check: true

feedback = None
# Evaluamos si la variable es de tipo 'str'
if isinstance(caracter, str):
  feedback = {"correct": True, "message": "¡Buen trabajo! Has creado correctamente una variable de tipo string."}
else:
  feedback = {"correct": False, "message": "La variable no es de tipo string. Asegúrate de poner texto entre comillas."}
feedback
```

:::

## Ejercicio 2: Variables Numéricas

En este ejercicio, los estudiantes deben crear una **variable numérica** y verificar su tipo de dato.

### Instrucciones:

1. Reemplaza el guion bajo (`______`) por un número para crear una variable numérica.
2. Corre el código para verificar que el tipo de dato sea correcto.

::: {.panel-tabset group="language"}

## R

```{webr}
#| exercise: eval_vars_ex4

# Crear una variable numérica
numerica <- ______

print(numerica)

# Verificamos el tipo de dato
typeof(numerica)

# Verificamos la clase de la variable
class(numerica)
```

El tipo de dato debería ser `numeric`. Si el estudiante ha hecho todo correctamente, la salida de `typeof(numerica)` y `class(numerica)` será `"double"` o `"numeric"`.


```{webr}
#| exercise: eval_vars_ex4
#| check: true

# Evaluamos si la variable es de clase 'numeric'
if (identical(class(numerica), "numeric")) {
  list(correct = TRUE, message = "¡Correcto! La variable es de tipo numérica.")
} else {
  list(correct = FALSE, message = "Incorrecto. Asegúrate de que la variable sea de tipo numérica.")
}
```

## Python

```{pyodide}
#| exercise: eval_vars_ex4py

# Crear una variable numérica
numerica = ______

print(numerica)

# Verificamos el tipo de dato
type(numerica)

```

El tipo de dato debería ser `numeric`. Si el estudiante ha hecho todo correctamente, la salida de `typeof(numerica)` y `class(numerica)` será `"double"` o `"numeric"`.


```{pyodide}
#| exercise: eval_vars_ex4py
#| check: true

feedback = None
# Evaluamos si la variable es de tipo 'int'
if isinstance(numerica, int):
  feedback = {"correct": True, "message": "¡Buen trabajo! Has creado correctamente una variable de tipo integer."}
else:
  feedback = {"correct": False, "message": "La variable no es de tipo integer."}
feedback
```

:::

### Explicación:

- En el **Ejercicio 1**, el objetivo es que creen una variable que contenga texto, lo que en términos de programación en R se denomina una *variable de carácter*. El texto siempre debe ir entre comillas dobles o simples.
- En el **Ejercicio 2**, deben crear una variable que contenga un número, lo que en R se conoce como una *variable numérica*. En este caso, pueden usar cualquier número (decimales o enteros).

