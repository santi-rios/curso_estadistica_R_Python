---
title: "Ejercicio I Visualización y Distribución de Datos con Python"
format:
  live-html:
    toc: true
sidebar: false
pyodide: 
    packages: 
        - pandas
        - matplotlib
        - seaborn
        - numpy
        - gapminder
        - scipy
resources:
    - datos
engine: knitr
---

{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}


```{pyodide}
#| include: false
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import norm

gapminder = pd.read_csv('./datos/gap_minder.tsv', sep='\t')

Mex = gapminder[gapminder['country'] == 'Mexico']
```

## Introducción

- En este ejercicio vamos a realizar gráficos utilizando `seaborn` y `matplotlib`.

Recordemos lo siguiente:

> Un gráfico es un *mapeo* de variables de *datos* a atributos *estéticos* de objetos *geométricos*.

Aunque esta "gramática de gráficos" es la base de `ggplot2` en R, los principios se aplican a `seaborn` en Python. Tiene *tres componentes principales*:

1.  **Datos (_data_):** el DataFrame de `pandas` que contiene las variables que queremos graficar.
2.  **Geometría (_geom_):** el tipo de gráfico que queremos crear (puntos, líneas, barras, etc.). En `seaborn`, esto se elige con funciones como `scatterplot()`, `lineplot()`, `barplot()`.
3.  **Estética (_aes_):** atributos visuales del gráfico. Por ejemplo, la posición `x` e `y`, el `color`, la `forma` y el `tamaño`. Cada atributo estético se puede asignar a una columna de nuestro DataFrame.

## Ejemplo de la gramática en un gráfico

Vamos a ver un ejemplo de estos componentes en un gráfico. Para ello vamos a utilizar el paquete `gapminder` que ya está cargado.

Para ver los datos de `gapminder`, puedes usar `gapminder.head()` en el bloque de código para ver las primeras filas, `gapminder.describe()` para un resumen estadístico, o `gapminder.info()` para ver la estructura de los datos.

```{pyodide}
#| min-lines: 2
gapminder.head()
```

Como puedes ver, los datos de `gapminder` contienen información sobre la esperanza de vida (`lifeExp`), el PIB per cápita (`gdpPercap`) y la población de varios países a lo largo del tiempo. `pop` es la población, `continent` es el continente al que pertenece el país y `year` es el año de la observación.

### Veamos un gráfico a través de la gramática de los gráficos.

El siguiente gráfico está realizado con los datos de `gapminder`. Intentemos reconocer qué variables y secciones corresponden a la gramática de gráficos:

```{pyodide}
#| eval: true
sns.scatterplot(data=gapminder, x='gdpPercap', y='lifeExp', hue='continent', size='pop', sizes=(20, 200))
plt.show()
```

Mirando el código y el gráfico, podemos identificar que:

*   **Datos:** el DataFrame `gapminder` se asigna al parámetro `data`.
*   **Estética:** el eje `x` representa la variable `gdpPercap`, el eje `y` representa la variable `lifeExp`, el `color` (o `hue`) representa la variable `continent` y el `tamaño` (`size`) representa la variable `pop`.
*   **Geometría:** generamos un gráfico de puntos, como indica la función `scatterplot()`.

### Cambiemos algunas propiedades

Supongamos que queremos cambiar los ejes del gráfico. ¿Cómo cambiarías el código anterior para que el eje `x` represente la esperanza de vida y el eje `y` el PIB per cápita?

```{pyodide}
#| exercise: grafico_puntos
#| exercise.setup:
#|   - "import seaborn as sns"
#|   - "import matplotlib.pyplot as plt"
#|   - "from gapminder import gapminder"
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt

gapminder = pd.read_csv('./datos/gap_minder.tsv', sep='\t')

sns.scatterplot(data=gapminder, x=______, y=______, hue='continent', size='pop', sizes=(20, 200))
plt.show()
```

::: {.hint}
Recuerda que los ejes están representados por los parámetros `x` (horizontal) e `y` (vertical).
:::

::: {.solution}
```python
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt

gapminder = pd.read_csv('./datos/gap_minder.tsv', sep='\t')
sns.scatterplot(data=gapminder, x='lifeExp', y='gdpPercap', hue='continent', size='pop', sizes=(20, 200))
plt.show()
```
:::

¡Bien hecho!

Además del gráfico de puntos (`scatterplot`), `seaborn` ofrece otros tipos de gráficos, como gráficos de líneas (`lineplot`), de barras (`barplot`), de áreas (`fill_between` de `matplotlib`) o histogramas (`histplot`).

## Gráfico de líneas

Vamos a realizar otros gráficos utilizando los datos en `gapminder`. Para generar el gráfico de líneas, vamos a ver la evolución de la población de México. Los gráficos de líneas son útiles para mostrar la evolución de una variable a lo largo del tiempo.

Primero, filtra los datos de `gapminder` para obtener solo los datos de México y guárdalos en un nuevo DataFrame llamado `Mex`.

```{pyodide}
#| exercise: vis_datos_mex
#| exercise.setup:
#|   - "from gapminder import gapminder"
#|   - "import pandas as pd"
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt

gapminder = pd.read_csv('./datos/gap_minder.tsv', sep='\t')


Mex = gapminder[gapminder['______'] == '______']
print(Mex.head())
```

::: {.hint}
Recuerda que el nombre del país es `Mexico` y que la columna que contiene el nombre del país es `country`.
:::

::: {.solution}
```python
Mex = gapminder[gapminder['country'] == 'Mexico']
print(Mex.head())
```
:::

Ahora, a partir de los datos de México, crea un gráfico de línea (`lineplot`) que muestre en el eje `x` los años y en el `y` la población.

```{pyodide}
#| exercise: grafico_lineas
#| exercise.setup:
#|   - "import seaborn as sns"
#|   - "import matplotlib.pyplot as plt"
#|   - "from gapminder import gapminder"
#|   - "Mex = gapminder[gapminder['country'] == 'Mexico']"
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt

gapminder = pd.read_csv('./datos/gap_minder.tsv', sep='\t')
Mex = gapminder[gapminder['country'] == 'Mexico']

sns.lineplot(data=______, x=______, y=______)
plt.show()
```

::: {.hint}
- El DataFrame se llama `Mex`.
- La variable que contiene los años se llama `year`.
- La variable que contiene la población se llama `pop`.
:::

::: {.solution}
```python
sns.lineplot(data=Mex, x='year', y='pop')
plt.show()
```
:::

### Hagamos un gráfico de barras

En `seaborn`, `barplot` es ideal cuando quieres que la altura de la barra represente una estimación de una variable numérica para cada categoría. Si ya tienes los valores que quieres para la altura de las barras (como en nuestro caso, la población para cada año), `barplot` funciona perfectamente.

Vamos a transformar el gráfico anterior a barras.

```{pyodide}
#| exercise: grafico_barras
#| exercise.setup:
#|   - "import seaborn as sns"
#|   - "import matplotlib.pyplot as plt"
#|   - "from gapminder import gapminder"
#|   - "Mex = gapminder[gapminder['country'] == 'Mexico']"
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt

gapminder = pd.read_csv('./datos/gap_minder.tsv', sep='\t')
Mex = gapminder[gapminder['country'] == 'Mexico']

sns.barplot(data=______, x=______, y=______)
plt.show()
```

::: {.hint}
Los parámetros `data`, `x` e `y` son los mismos que en el gráfico de líneas.
:::

::: {.solution}
```python
sns.barplot(data=Mex, x='year', y='pop')
plt.show()
```
:::

### Hagamos un gráfico de área

Para gráficos de área, podemos usar la función `fill_between` de `matplotlib` sobre un gráfico de líneas.

Modifica el siguiente código para generar un gráfico de áreas que nos muestre los años en el eje `x` y la población en el eje `y`.

```{pyodide}
#| exercise: grafico_areas
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt

gapminder = pd.read_csv('./datos/gap_minder.tsv', sep='\t')
Mex = gapminder[gapminder['country'] == 'Mexico']

plt.plot(Mex['year'], Mex['pop'])
plt.fill_between(______, ______, alpha=0.3)
plt.show()
```

::: {.hint}
`fill_between` necesita los valores del eje x y los valores del eje y.
:::

::: {.solution}
```python
plt.plot(Mex['year'], Mex['pop'])
plt.fill_between(Mex['year'], Mex['pop'], alpha=0.3)
plt.show()
```
:::

## Visualizar Distribución Normal

- Recuerda que la distribución normal tiene 2 parámetros: la media $\mu$ y la desviación estándar $\sigma$.

Para una distribución normal estandarizada, la media es 0 y la desviación estándar es 1.

Escribe el código de Python necesario para simular y graficar los valores de una distribución normal usando `scipy.stats.norm.pdf()`.

```{pyodide}
#| exercise: distribucion_normal
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm

x = np.linspace(-5, 5, 100)
mean = 0
sd = 1

y = norm.pdf(x, loc=mean, scale=sd)

plt.plot(x, y)
plt.show()
```

::: {.hint}
`norm.pdf` toma como argumentos el vector de valores (`x`), la media (`loc`) y la desviación estándar (`scale`).
:::

::: {.solution}
```python
x = np.linspace(-5, 5, 100)
mean = 0
sd = 1

y = norm.pdf(x, loc=mean, scale=sd)

plt.plot(x, y)
plt.show()
```
:::

## Fuentes

Esperamos que esta pequeña introducción a los gráficos en Python te sea de utilidad. A continuación te dejamos una serie de materiales que pueden resultar muy útiles para continuar aprendiendo:

-   [Galería de Seaborn](https://seaborn.pydata.org/examples/index.html)
-   [Tutorial de Seaborn](https://seaborn.pydata.org/tutorial.html)
-   [Galería de Matplotlib](https://matplotlib.org/stable/gallery/index.html)
-   [The Python Graph Gallery](https://www.python-graph-gallery.com/)

## Licencia

Este curso se comparte bajo la licencia [Creative Commons Attribution-ShareAlike 4.0 International License](https://creativecommons.org/licenses/by-sa/4.0/deed.es_ES) y fue realizado por [Yanina Bellini Saibene](https://yabellini.netlify.app/) y adaptado a Python por Santiago Garcia y GitHub Copilot.
