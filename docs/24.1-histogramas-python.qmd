---
title: "Graficar Distribuciones de Probabilidad en Python"
subtitle: "Primeros pasos con matplotlib y seaborn"
author:
  - name: "Mtro. Santiago Ríos"
    email: santiagoboo99@gmail.com
    affiliation: 
      - name: Cursos Orca
        city: CDMX
        url: orcaasesina.com
format:
  live-html:
    toc: true
sidebar: false
pyodide: 
    packages: 
        - pandas
        - matplotlib
        - seaborn
        - numpy
engine: knitr
---

{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}

## Introducción y Objetivos

- Antes de seguir con el tema de distribuciones de probabilidad, vamos a aprender a graficar en Python.
- En esta lección, aprenderás a graficar distribuciones de probabilidad en Python con las bibliotecas `matplotlib` y `seaborn`.
- Comenzaremos graficando un histograma, que es una forma común de visualizar la distribución de una variable continua.
- Estas bibliotecas siguen una estructura lógica y consistente que facilita la creación de gráficos complejos.

---

## Paso 1. Cargar las librerías

```{pyodide}
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
```

---

## Paso 2. Generar datos

- Vamos a crear un dataset de ejemplo con 1000 datos que siguen una distribución normal.

```{pyodide}
np.random.seed(42)
datos_normales = np.random.normal(loc=50, scale=10, size=1000)
# Visualizar los primeros y últimos datos
print("Primeros 10:", datos_normales[:10])
print("Últimos 10:", datos_normales[-10:])
df_normales = pd.DataFrame({'valor': datos_normales})
```

---

## Paso 3. Crear un histograma básico

```{pyodide}
plt.figure(figsize=(8,5))
sns.histplot(df_normales['valor'], bins=30, color="skyblue", edgecolor="black")
plt.title("Distribución de Datos Normales")
plt.xlabel("Valor de X")
plt.ylabel("Frecuencia de y")
plt.show()
```

---

## ¿Cómo afecta el número de contenedores (bins)?

- Cambia el número de bins y observa cómo se modifica el gráfico.

```{pyodide}
plt.figure(figsize=(8,5))
sns.histplot(df_normales['valor'], bins=10, color="skyblue")
plt.title("Menos bins")
plt.show()

plt.figure(figsize=(8,5))
sns.histplot(df_normales['valor'], bins=100, color="skyblue")
plt.title("Más bins")
plt.show()
```

---

## Guardar el gráfico en un objeto y personalizarlo

```{pyodide}
fig, ax = plt.subplots(figsize=(8,5))
sns.histplot(df_normales['valor'], bins=30, color="skyblue", edgecolor="black", ax=ax)
ax.set_title("Distribución de Datos Normales")
ax.set_xlabel("Valor de X")
ax.set_ylabel("Frecuencia de y")
plt.tight_layout()
plt.show()
```

---

## Guardar el gráfico como imagen

```{pyodide}
fig.savefig("histograma_normales.png", dpi=300)
```

---

## Ejemplo Práctico: Alturas de Jirafas

- Simulamos datos de alturas de jirafas en dos islas diferentes.

```{pyodide}
np.random.seed(12)
x1 = np.round(np.random.normal(10, 2, 50))
x2 = np.round(np.random.normal(18, 1.2, 50))
alturas = np.concatenate([x1, x2])
islas = np.array(["Isla #1"]*50 + ["Isla #2"]*50)
df = pd.DataFrame({"altura": alturas, "isla": islas})
```

---

## Histograma de alturas de jirafas

```{pyodide}
plt.figure(figsize=(8,5))
sns.histplot(data=df, x="altura", hue="isla", bins=10, alpha=0.7, element="step", stat="count")
plt.title("Distribución de Alturas de Jirafas por Isla")
plt.xlabel("Altura (cm)")
plt.ylabel("Frecuencia")
plt.legend(title="Isla")
plt.show()
```

---

## Personalizar colores y temas

```{pyodide}
plt.figure(figsize=(8,5))
sns.histplot(data=df, x="altura", hue="isla", bins=10, palette=["#00cd00", "#00c5cd"], alpha=0.7, element="step", stat="count")
plt.title("Distribución de Alturas de Jirafas por Isla")
plt.xlabel("Altura (cm)")
plt.ylabel("Frecuencia")
plt.legend(title="Isla", loc="upper right")
plt.tight_layout()
plt.show()
```

---

## Guardar el gráfico de jirafas

```{pyodide}
plt.savefig("histograma_jirafas.png", dpi=300)
```

---

## Reflexión

- ¿Cómo ayuda la visualización a entender mejor los datos?
- ¿Qué diferencias observas entre los grupos?
- ¿Cómo puedes personalizar tus gráficos para comunicar mejor tus hallazgos?

Estas herramientas te permiten visualizar y comunicar la estructura de tus datos en Python.
