{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Intervalos de Confianza con Python\"\n",
        "format:\n",
        "  live-html:\n",
        "    toc: true\n",
        "sidebar: false\n",
        "pyodide: \n",
        "    packages: \n",
        "        - matplotlib\n",
        "        - numpy\n",
        "        - scipy\n",
        "---\n",
        "\n",
        "## Introducción\n",
        "\n",
        "Los intervalos de confianza son rangos que proporcionan una estimación del grado de incertidumbre alrededor de un estadístico de muestra, como la media o una proporción. Nos indican el rango dentro del cual es probable que se encuentre el parámetro real de la población con un cierto nivel de confianza (habitualmente el 95%).\n",
        "\n",
        "## Conceptos Clave\n",
        "\n",
        "- **Intervalo de Confianza para la Media:** Proporciona un rango probable para la verdadera media de la población. A menudo calculado usando la media muestral, la desviación estándar de la muestra, y el tamaño de la muestra.\n",
        "\n",
        "- **Intervalo de Confianza para una Proporción:** Indica un rango para la verdadera proporción de la población. Calculado utilizando la proporción muestral, el tamaño de la muestra, y un estadístico z de la distribución normal estándar.\n",
        "\n",
        "- **Interpretación:** Un intervalo de confianza del 95% significa que si se toman 100 muestras diferentes y se calculan 100 intervalos, aproximadamente 95 de esos intervalos deberían contener la verdadera media o proporción de la población.\n",
        "\n",
        "## Ejercicio Práctico en Python\n",
        "\n",
        "Exploraremos cómo calcular intervalos de confianza para la media utilizando un conjunto de datos simulado.\n",
        "\n",
        "```{pyodide}\n",
        "#| exercise: intervalo_confianza\n",
        "#| exercise.setup:\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy.stats import norm\n",
        "\n",
        "# Simulación de datos de alturas en cm\n",
        "np.random.seed(123)\n",
        "alturas = np.random.normal(loc=170, scale=10, size=100)\n",
        "\n",
        "# Calcular la media y el error estándar\n",
        "media_altura = np.mean(alturas)\n",
        "error_estandar = np.std(alturas, ddof=1) / np.sqrt(len(alturas))\n",
        "\n",
        "# Calcular el intervalo de confianza del 95% para la media\n",
        "nivel_confianza = 0.95\n",
        "z = norm.ppf((1 + nivel_confianza) / 2)  # Valor z para un 95% de confianza\n",
        "limite_inferior = media_altura - z * error_estandar\n",
        "limite_superior = media_altura + z * error_estandar\n",
        "\n",
        "# Mostrar resultados\n",
        "print(f\"Intervalo de Confianza del 95% para la Media:\")\n",
        "print(f\"Límite Inferior: {limite_inferior:.2f}\")\n",
        "print(f\"Límite Superior: {limite_superior:.2f}\")\n",
        "\n",
        "# Visualización\n",
        "plt.hist(alturas, bins=20, color=\"lightgreen\", edgecolor='black', alpha=0.7)\n",
        "plt.title(\"Distribución de Alturas Simuladas\")\n",
        "plt.xlabel(\"Alturas (cm)\")\n",
        "plt.axvline(x=limite_inferior, color='blue', linestyle='--', linewidth=2)\n",
        "plt.axvline(x=limite_superior, color='blue', linestyle='--', linewidth=2)\n",
        "plt.legend([\"Intervalo de Confianza\"])\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "## Reflexión y Discusión:\n",
        "\n",
        "- Examinar el intervalo de confianza calculado: ¿Qué significa en el contexto de estos datos de altura?\n",
        "- Discute cómo el tamaño de la muestra afecta la amplitud del intervalo de confianza. ¿Qué sucedería si tuvieras una muestra más grande o más pequeña?\n",
        "\n",
        "Esta lección ofrece un enfoque práctico sobre cómo calcular e interpretar intervalos de confianza en Python. Con estas habilidades, podrás cuantificar la incertidumbre y comunicar tus resultados con mayor claridad y precisión."
      ],
      "id": "7ab9365f"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/home/santi/.local/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}