{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Test de Kruskal-Wallis en Python\"\n",
        "author: \"Traducido y adaptado de R por un asistente de IA\"\n",
        "format: live-html\n",
        "pyodide: \n",
        "    packages: \n",
        "        - numpy\n",
        "        - pandas\n",
        "        - matplotlib\n",
        "        - seaborn\n",
        "        - pingouin\n",
        "---\n",
        "\n",
        "## ¿Qué es el Test de Kruskal-Wallis?\n",
        "\n",
        "El test de Kruskal-Wallis es una **prueba no paramétrica** utilizada para determinar si hay diferencias significativas entre **tres o más grupos** en una variable continua. Es la alternativa no paramétrica al ANOVA de una vía cuando:\n",
        "\n",
        "- Los datos no siguen una distribución normal\n",
        "- Las varianzas no son homogéneas entre grupos\n",
        "- Los tamaños de muestra son pequeños\n",
        "\n",
        "### Características del Test\n",
        "\n",
        "- **No asume normalidad**: Funciona con distribuciones asimétricas\n",
        "- **Basado en rangos**: Utiliza los rangos de los datos en lugar de los valores originales\n",
        "- **Robusto**: Menos sensible a valores atípicos que el ANOVA\n",
        "\n",
        "## Hipótesis del Test de Kruskal-Wallis\n",
        "\n",
        "- **H₀**: Las medianas de todos los grupos son iguales\n",
        "- **H₁**: Al menos una de las medianas es diferente\n",
        "\n",
        "*Nota*: Técnicamente, el test compara las distribuciones de los rangos, pero comúnmente se interpreta en términos de medianas.\n",
        "\n",
        "## Ejemplo Práctico: Crecimiento Dental en Cobayas\n",
        "\n",
        "Usaremos un conjunto de datos que evalúa el efecto de la vitamina C en el crecimiento dental en cobayas, con tres niveles de dosis: 0.5, 1.0 y 2.0 mg/día.\n",
        "\n",
        "### 1. Cargar librerías y datos\n",
        "\n",
        "```{pyodide}\n",
        "#| echo: false\n",
        "#| output: false\n",
        "import micropip\n",
        "await micropip.install(['pandas', 'numpy', 'scipy', 'seaborn', 'matplotlib', 'pingouin'])\n",
        "```\n",
        "\n",
        "```{pyodide}\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import scipy.stats as stats\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import pingouin as pg\n",
        "from scipy.stats import kruskal\n",
        "from scipy import stats as scipy_stats\n",
        "\n",
        "# Cargar datos de ToothGrowth (similar a R)\n",
        "# Simulamos datos similares al dataset ToothGrowth de R\n",
        "np.random.seed(42)\n",
        "\n",
        "# Crear datos simulados basados en ToothGrowth\n",
        "dose_05 = np.random.normal(10, 4, 20)  # Dosis 0.5\n",
        "dose_10 = np.random.normal(19, 4, 20)  # Dosis 1.0  \n",
        "dose_20 = np.random.normal(26, 4, 20)  # Dosis 2.0\n",
        "\n",
        "# Crear DataFrame\n",
        "my_data = pd.DataFrame({\n",
        "    'len': np.concatenate([dose_05, dose_10, dose_20]),\n",
        "    'dose': ['D0.5'] * 20 + ['D1'] * 20 + ['D2'] * 20\n",
        "})\n",
        "\n",
        "# Convertir dose a categórica con orden\n",
        "my_data['dose'] = pd.Categorical(my_data['dose'], \n",
        "                                categories=['D0.5', 'D1', 'D2'], \n",
        "                                ordered=True)\n",
        "\n",
        "print(\"Primeras filas del dataset:\")\n",
        "print(my_data.head(10))\n",
        "print(f\"\\nEstructura del dataset:\")\n",
        "print(f\"Filas: {len(my_data)}\")\n",
        "print(f\"Columnas: {list(my_data.columns)}\")\n",
        "print(f\"\\nNiveles de dosis: {my_data['dose'].cat.categories.tolist()}\")\n",
        "```\n",
        "\n",
        "### 2. Estadísticas Descriptivas\n",
        "\n",
        "```{pyodide}\n",
        "# Estadísticas por grupo\n",
        "estadisticas = my_data.groupby('dose')['len'].agg([\n",
        "    ('count', 'count'),\n",
        "    ('media', 'mean'),\n",
        "    ('mediana', 'median'),\n",
        "    ('desv_std', 'std'),\n",
        "    ('min', 'min'),\n",
        "    ('max', 'max')\n",
        "]).round(3)\n",
        "\n",
        "print(\"Estadísticas descriptivas por grupo:\")\n",
        "print(estadisticas)\n",
        "```\n",
        "\n",
        "### 3. Visualización de los Datos\n",
        "\n",
        "```{pyodide}\n",
        "# Configurar el estilo de los gráficos\n",
        "plt.style.use('default')\n",
        "fig, axes = plt.subplots(1, 2, figsize=(12, 5))\n",
        "\n",
        "# Boxplot\n",
        "sns.boxplot(x='dose', y='len', data=my_data, \n",
        "            palette=['#1f77b4', '#ff7f0e', '#2ca02c'], ax=axes[0])\n",
        "axes[0].set_title('Distribución de la longitud del diente por dosis')\n",
        "axes[0].set_xlabel('Dosis')\n",
        "axes[0].set_ylabel('Longitud del diente')\n",
        "\n",
        "# Violin plot para mostrar mejor la distribución\n",
        "sns.violinplot(x='dose', y='len', data=my_data, \n",
        "               palette=['#1f77b4', '#ff7f0e', '#2ca02c'], ax=axes[1])\n",
        "axes[1].set_title('Distribución detallada por dosis')\n",
        "axes[1].set_xlabel('Dosis')\n",
        "axes[1].set_ylabel('Longitud del diente')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "### 4. Verificación de Supuestos\n",
        "\n",
        "Antes de decidir entre ANOVA paramétrico y Kruskal-Wallis, verificaremos los supuestos:\n",
        "\n",
        "```{pyodide}\n",
        "# Prueba de normalidad por grupo (Shapiro-Wilk)\n",
        "print(\"Pruebas de normalidad por grupo (Shapiro-Wilk):\")\n",
        "print(\"H₀: Los datos siguen una distribución normal\")\n",
        "print(\"H₁: Los datos no siguen una distribución normal\\n\")\n",
        "\n",
        "for dose in my_data['dose'].cat.categories:\n",
        "    grupo_data = my_data[my_data['dose'] == dose]['len']\n",
        "    stat, p_value = stats.shapiro(grupo_data)\n",
        "    print(f\"Grupo {dose}:\")\n",
        "    print(f\"  Estadístico: {stat:.4f}\")\n",
        "    print(f\"  p-valor: {p_value:.4f}\")\n",
        "    print(f\"  {'✓ Normal' if p_value > 0.05 else '✗ No normal'} (α = 0.05)\\n\")\n",
        "```\n",
        "\n",
        "```{pyodide}\n",
        "# Prueba de homogeneidad de varianzas (Levene)\n",
        "grupos = [my_data[my_data['dose'] == dose]['len'] for dose in my_data['dose'].cat.categories]\n",
        "stat_levene, p_levene = stats.levene(*grupos)\n",
        "\n",
        "print(\"Prueba de homogeneidad de varianzas (Levene):\")\n",
        "print(\"H₀: Las varianzas son iguales en todos los grupos\")\n",
        "print(\"H₁: Al menos una varianza es diferente\")\n",
        "print(f\"Estadístico: {stat_levene:.4f}\")\n",
        "print(f\"p-valor: {p_levene:.4f}\")\n",
        "print(f\"{'✓ Varianzas homogéneas' if p_levene > 0.05 else '✗ Varianzas heterogéneas'} (α = 0.05)\")\n",
        "```\n",
        "\n",
        "### 5. Test de Kruskal-Wallis\n",
        "\n",
        "```{pyodide}\n",
        "# Realizar el test de Kruskal-Wallis\n",
        "# Separar los datos por grupo\n",
        "grupo_05 = my_data[my_data['dose'] == 'D0.5']['len']\n",
        "grupo_1 = my_data[my_data['dose'] == 'D1']['len']\n",
        "grupo_2 = my_data[my_data['dose'] == 'D2']['len']\n",
        "\n",
        "# Aplicar el test\n",
        "h_stat, p_value = kruskal(grupo_05, grupo_1, grupo_2)\n",
        "\n",
        "print(\"Test de Kruskal-Wallis:\")\n",
        "print(\"=\"*40)\n",
        "print(\"H₀: Las medianas de todos los grupos son iguales\")\n",
        "print(\"H₁: Al menos una mediana es diferente\")\n",
        "print(f\"\\nEstadístico H: {h_stat:.4f}\")\n",
        "print(f\"p-valor: {p_value:.4f}\")\n",
        "print(f\"Grados de libertad: {len(my_data['dose'].cat.categories) - 1}\")\n",
        "\n",
        "# Interpretación\n",
        "alpha = 0.05\n",
        "if p_value < alpha:\n",
        "    print(f\"\\n✓ CONCLUSIÓN:\")\n",
        "    print(f\"p-valor ({p_value:.4f}) < α ({alpha})\")\n",
        "    print(\"Rechazamos H₀: Hay evidencia significativa de diferencias entre grupos.\")\n",
        "else:\n",
        "    print(f\"\\n✗ CONCLUSIÓN:\")\n",
        "    print(f\"p-valor ({p_value:.4f}) ≥ α ({alpha})\")\n",
        "    print(\"No rechazamos H₀: No hay evidencia suficiente de diferencias entre grupos.\")\n",
        "```\n",
        "\n",
        "### 6. Comparaciones Post-Hoc\n",
        "\n",
        "Si el test de Kruskal-Wallis es significativo, realizamos comparaciones por pares:\n",
        "\n",
        "```{pyodide}\n",
        "# Comparaciones post-hoc con corrección de Bonferroni\n",
        "from scipy.stats import mannwhitneyu\n",
        "from itertools import combinations\n",
        "\n",
        "if p_value < 0.05:\n",
        "    print(\"\\nComparaciones post-hoc (Mann-Whitney U con corrección de Bonferroni):\")\n",
        "    print(\"=\"*60)\n",
        "    \n",
        "    grupos_datos = {\n",
        "        'D0.5': grupo_05,\n",
        "        'D1': grupo_1, \n",
        "        'D2': grupo_2\n",
        "    }\n",
        "    \n",
        "    # Todas las comparaciones por pares\n",
        "    comparaciones = list(combinations(grupos_datos.keys(), 2))\n",
        "    n_comparaciones = len(comparaciones)\n",
        "    alpha_corregido = 0.05 / n_comparaciones  # Corrección de Bonferroni\n",
        "    \n",
        "    print(f\"Número de comparaciones: {n_comparaciones}\")\n",
        "    print(f\"α corregido (Bonferroni): {alpha_corregido:.4f}\\n\")\n",
        "    \n",
        "    for grupo1, grupo2 in comparaciones:\n",
        "        stat, p_val = mannwhitneyu(grupos_datos[grupo1], grupos_datos[grupo2], \n",
        "                                  alternative='two-sided')\n",
        "        \n",
        "        significativo = \"✓ Significativo\" if p_val < alpha_corregido else \"✗ No significativo\"\n",
        "        \n",
        "        print(f\"{grupo1} vs {grupo2}:\")\n",
        "        print(f\"  U-statistic: {stat:.1f}\")\n",
        "        print(f\"  p-valor: {p_val:.4f}\")\n",
        "        print(f\"  {significativo}\")\n",
        "        print()\n",
        "```\n",
        "\n",
        "### 7. Visualización de Resultados\n",
        "\n",
        "```{pyodide}\n",
        "# Crear un gráfico que muestre los resultados del test\n",
        "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6))\n",
        "\n",
        "# Boxplot con información estadística\n",
        "box_plot = sns.boxplot(x='dose', y='len', data=my_data, \n",
        "                      palette=['#1f77b4', '#ff7f0e', '#2ca02c'], ax=ax1)\n",
        "ax1.set_title(f'Test de Kruskal-Wallis\\nH = {h_stat:.3f}, p = {p_value:.4f}')\n",
        "ax1.set_xlabel('Dosis')\n",
        "ax1.set_ylabel('Longitud del diente')\n",
        "\n",
        "# Agregar líneas horizontales para mostrar medianas\n",
        "for i, dose in enumerate(my_data['dose'].cat.categories):\n",
        "    mediana = my_data[my_data['dose'] == dose]['len'].median()\n",
        "    ax1.hlines(mediana, i-0.4, i+0.4, colors='red', linestyles='--', linewidth=2)\n",
        "\n",
        "# Gráfico de medianas con intervalos de confianza\n",
        "medianas = my_data.groupby('dose')['len'].median()\n",
        "q1 = my_data.groupby('dose')['len'].quantile(0.25)\n",
        "q3 = my_data.groupby('dose')['len'].quantile(0.75)\n",
        "\n",
        "x_pos = range(len(medianas))\n",
        "ax2.errorbar(x_pos, medianas, yerr=[medianas - q1, q3 - medianas], \n",
        "             fmt='o', capsize=5, capthick=2, markersize=8)\n",
        "ax2.set_xticks(x_pos)\n",
        "ax2.set_xticklabels(medianas.index)\n",
        "ax2.set_title('Medianas con Rango Intercuartílico')\n",
        "ax2.set_xlabel('Dosis')\n",
        "ax2.set_ylabel('Mediana de longitud del diente')\n",
        "ax2.grid(True, alpha=0.3)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "### 8. Comparación con ANOVA Paramétrico\n",
        "\n",
        "Para fines educativos, comparemos con ANOVA de una vía:\n",
        "\n",
        "```{pyodide}\n",
        "# ANOVA de una vía para comparación\n",
        "from scipy.stats import f_oneway\n",
        "\n",
        "f_stat, p_anova = f_oneway(grupo_05, grupo_1, grupo_2)\n",
        "\n",
        "print(\"Comparación de métodos:\")\n",
        "print(\"=\"*40)\n",
        "print(f\"Kruskal-Wallis: H = {h_stat:.4f}, p = {p_value:.4f}\")\n",
        "print(f\"ANOVA una vía:  F = {f_stat:.4f}, p = {p_anova:.4f}\")\n",
        "print()\n",
        "\n",
        "if p_value < 0.05 and p_anova < 0.05:\n",
        "    print(\"✓ Ambos tests son significativos - conclusiones consistentes\")\n",
        "elif p_value >= 0.05 and p_anova >= 0.05:\n",
        "    print(\"✓ Ambos tests no son significativos - conclusiones consistentes\")\n",
        "else:\n",
        "    print(\"⚠ Los tests difieren - considerar supuestos y robustez\")\n",
        "```\n",
        "\n",
        "### 9. Tamaño del Efecto\n",
        "\n",
        "```{pyodide}\n",
        "# Calcular eta cuadrado para Kruskal-Wallis (equivalente no paramétrico)\n",
        "n = len(my_data)\n",
        "k = len(my_data['dose'].cat.categories)\n",
        "eta_squared = (h_stat - k + 1) / (n - k)\n",
        "\n",
        "print(f\"Tamaño del efecto (η² para Kruskal-Wallis): {eta_squared:.4f}\")\n",
        "\n",
        "# Interpretación del tamaño del efecto\n",
        "if eta_squared < 0.01:\n",
        "    interpretacion = \"efecto muy pequeño\"\n",
        "elif eta_squared < 0.06:\n",
        "    interpretacion = \"efecto pequeño\"\n",
        "elif eta_squared < 0.14:\n",
        "    interpretacion = \"efecto mediano\"\n",
        "else:\n",
        "    interpretacion = \"efecto grande\"\n",
        "\n",
        "print(f\"Interpretación: {interpretacion}\")\n",
        "```\n",
        "\n",
        "## Cuándo Usar Kruskal-Wallis vs ANOVA\n",
        "\n",
        "**Usa Kruskal-Wallis cuando:**\n",
        "- Los datos no siguen una distribución normal\n",
        "- Las varianzas no son homogéneas\n",
        "- Tienes datos ordinales\n",
        "- Hay valores atípicos extremos\n",
        "- Los tamaños de muestra son pequeños\n",
        "\n",
        "**Usa ANOVA cuando:**\n",
        "- Los datos siguen una distribución normal\n",
        "- Las varianzas son homogéneas\n",
        "- Quieres mayor poder estadístico\n",
        "- Los tamaños de muestra son grandes\n",
        "\n",
        "## Resumen de la Metodología\n",
        "\n",
        "1. **Explorar los datos**: Estadísticas descriptivas y visualización\n",
        "2. **Verificar supuestos**: Normalidad (Shapiro-Wilk) y homogeneidad (Levene)\n",
        "3. **Elegir el test**: Kruskal-Wallis si se violan supuestos del ANOVA\n",
        "4. **Interpretar resultados**: Estadístico H y p-valor\n",
        "5. **Comparaciones post-hoc**: Si el test principal es significativo\n",
        "6. **Evaluar tamaño del efecto**: Magnitud práctica de las diferencias"
      ],
      "id": "e63360ea"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/home/santi/.local/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}